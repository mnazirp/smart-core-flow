[
    {
        "id": "68f1d2b77bbdcda6",
        "type": "tab",
        "label": "Smart:Apps",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10a453599cf0bfe0",
        "type": "tab",
        "label": "Smart:Forms",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3a3a41a0d95d74c4",
        "type": "tab",
        "label": "Smart:Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "786b2ecce5602d44",
        "type": "tab",
        "label": "Smart:List",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "35d2cc8d792ddb2a",
        "type": "tab",
        "label": "Migrations",
        "disabled": false,
        "info": "// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "bf22cd3c7ed55a35",
        "type": "tab",
        "label": "R&D",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c13d19c3dfb652c9",
        "type": "tab",
        "label": "Smart:Scope",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77002254b872fa8e",
        "type": "subflow",
        "name": "jwt-sign",
        "info": "## input:\r\non msg.sub assign an object like this:\r\n\r\n\r\n    {        \r\n        nik: '', \r\n        fullName: '',\r\n        email: '',\r\n        occupation: '',\r\n        roles: ['']\r\n    }\r\n\r\n\r\n\r\n## output:\r\ninside msg.sub:\r\n\r\n\r\n\r\n    {\r\n        token: 'eyJhbGciOiJIUzI1NiI...',\r\n        decoded: {}  \r\n    }\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "156f4bd7081013b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "156f4bd7081013b2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "32e9ed8660fb2fde",
        "type": "subflow",
        "name": "jwt-verify",
        "info": "## input:\non msg.sub assign an a token string like this:\n\n\n    'eyJhbGciOiJIUzI1NiI...'\n\n\n## output:\ninside msg.sub:\n\n\n\n    {\n        token: 'eyJhbGciOiJIUzI1NiI...',\n        decoded: {},\n        error: {\n            message: 'jwt expired',\n            stack: '',\n            arguments: null,\n            name: 'TokenExpiredError',\n            expiredAt: '2023-02-19T07:49:01.000Z'\n        }  \n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "98d349474a76dad2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "98d349474a76dad2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0f802e687dcc9e4a",
        "type": "subflow",
        "name": "hashing",
        "info": "## Input\r\nset msg.sub with the password string that neet to be hashing\r\n\r\n    `MyPassword`\r\n\r\n## Output\r\nit will produce msg.sub a hasing string\r\n\r\n    ``\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ae6193f87f0b9e1e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "ae6193f87f0b9e1e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c9c1579a9da27745",
        "type": "subflow",
        "name": "hashing compare",
        "info": "## Input\r\nassign msg.sub with an object:\r\n\r\n    {\r\n        password: 'MyPassword',\r\n        hash: '$2b$10$...'\r\n    }\r\n\r\n## Output\r\nit will produce msg.sub with object:\r\n\r\n    {\r\n        isValid: true //or false\r\n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c1d5ea079e920d21"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c1d5ea079e920d21",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cfa2e326ca547b07",
        "type": "subflow",
        "name": "crypto-encrypt",
        "info": "## Input\r\nset msg.sub into a string that want to encrypt\r\n\r\n    msg.sub = \"some random text\"\r\n\r\n## output\r\nit will produce encrypted text in msg.sub\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a91ed5f774324e22"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "a91ed5f774324e22",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c2f437acbbab02bd",
        "type": "subflow",
        "name": "crypto-dencrypt",
        "info": "## Input\r\nassign msg.sub with encrypted text like:\r\n\r\n    msg.sub = \"d15cac3ea87e3fca0b51b\"\r\n\r\n## output\r\nit will produce dencrypted text in msg.sub\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "1dc8e5a1237fe665"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "1dc8e5a1237fe665",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f804f4dc33b60992",
        "type": "subflow",
        "name": "sub:searchOnHiearchyByCriteria",
        "info": "## Input on msg.sub\r\n\r\n    msg.sub = {\r\n        topic: 'area',\r\n        root: 5001,\r\n        pointer: 5068,\r\n        crit: [\r\n            {\r\n                key: 'category',\r\n                val: 'BLOCK'\r\n            }\r\n        ]\r\n    }\r\n\r\n`topic` is a topic for hierarchy in couchdb \r\n\r\n`root` is an id as starting point of all hierarchy tree \r\n\r\n`pointer` is starting point to search by id inside tree\r\n\r\n`crit` as a filter to define the final result\r\n\r\n## Output on msg.sub\r\n\r\n    msg.sub = {\r\n        result,\r\n        parents,\r\n        flatten\r\n    }\r\n\r\n`result` is the result after filter by criteria\r\n\r\n`parents` contains all superior node starting from pointer id\r\n\r\n`flatten` contains all flatten objects starting at pointer ",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "bfe21c560c82d092"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "83a00b6f98e03567",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "44e549ae5408d3d3",
        "type": "subflow",
        "name": "algo:findInNestedObj",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f6e36d93f7d62631"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 100,
                "wires": [
                    {
                        "id": "f6e36d93f7d62631",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "63baa18a398cf25b",
        "type": "subflow",
        "name": "algo:scopeFinder",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "7a88b9a6f510af6e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 100,
                "wires": [
                    {
                        "id": "5ed00e5c9996b0ba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "25a729f30c43b341",
        "type": "subflow",
        "name": "sub:getScopeByCode",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "7f0d668f43a58f56"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 300,
                "wires": [
                    {
                        "id": "0a60a67d15c726a8",
                        "port": 0
                    },
                    {
                        "id": "074973f584ae3ece",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "784d89e62dfb5070",
        "type": "cloudantplus",
        "host": "${DIGA_COUCHDB}",
        "name": "diga-couchdb"
    },
    {
        "id": "9dc2644ec5b51cb2",
        "type": "mysql2-server",
        "host": "${DIGA_MYSQL_HOST}",
        "port": "${DIGA_MYSQL_PORT}",
        "username": "${DIGA_MYSQL_USER}",
        "password": "password",
        "db": "${DIGA_MYSQL_DBNAME}",
        "servername": ""
    },
    {
        "id": "0fb96b870afb5c15",
        "type": "redis-config",
        "name": "Local",
        "options": "REDIS_URL",
        "cluster": false,
        "optionsType": "env"
    },
    {
        "id": "156f4bd7081013b2",
        "type": "function",
        "z": "77002254b872fa8e",
        "name": "jwt sign",
        "func": "let secret = env.get('JWTSECRET');\nlet options = { expiresIn: '2 days' };\nlet token = jwt.sign(msg.sub, secret, options);\nlet decoded = jwt.verify(token, secret);\nmsg.sub = {\n    token: token,\n    decoded: decoded\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "98d349474a76dad2",
        "type": "function",
        "z": "32e9ed8660fb2fde",
        "name": "jwt verify",
        "func": "let secret = env.get('JWTSECRET');\nlet error = null;\nlet decoded = null;\njwt.verify(msg.sub, secret, (err, dec) => {\n    if(err) error = err;\n    decoded = dec;\n});\nmsg.sub = {\n    token: msg.sub,\n    decoded: decoded,\n    error: error\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ae6193f87f0b9e1e",
        "type": "function",
        "z": "0f802e687dcc9e4a",
        "name": "hashing",
        "func": "let pass = bcrypt.hashSync(msg.sub, 10);\nmsg.sub = pass;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c1d5ea079e920d21",
        "type": "function",
        "z": "c9c1579a9da27745",
        "name": "compare",
        "func": "let {password, hash} = msg.sub;\nlet rs = '';\nrs = bcrypt.compareSync(password, hash);\nmsg.sub = {\n    isValid: rs\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a91ed5f774324e22",
        "type": "function",
        "z": "cfa2e326ca547b07",
        "name": "crypto-encrypt",
        "func": "let algorithm = 'aes256';\nlet key = env.get('CRYPTO_KEY');\nlet iv = env.get('CRYPTO_IV');\nlet cipher = crypto.createCipheriv(algorithm, key, iv);\nlet encrypted = cipher.update(msg.sub, 'utf8', 'hex') + cipher.final('hex');\nmsg.sub = encrypted;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1dc8e5a1237fe665",
        "type": "function",
        "z": "c2f437acbbab02bd",
        "name": "crypto-dencrypt",
        "func": "let algorithm = 'aes256';\nlet key = env.get('CRYPTO_KEY');\nlet iv = env.get('CRYPTO_IV');\nlet decipher = crypto.createDecipheriv(algorithm, key, iv);\nlet decrypted = decipher.update(msg.sub, 'hex', 'utf8') + decipher.final('utf8');\nmsg.sub = decrypted;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "83a00b6f98e03567",
        "type": "function",
        "z": "f804f4dc33b60992",
        "name": "mapping sub result",
        "func": "let { root, pointer, crit } = msg.sub;\nlet { value } = msg.payload[0];\nlet obj = value.data;\n\nlet rootObj = findNestedObj(obj, 'id', root);\nlet pointerObj = (rootObj) ? findNestedObj(rootObj, 'id', pointer) : undefined;\nlet rootFlat = (rootObj) ? flatten([rootObj]) : [];\nlet pointerFlat = (pointerObj) ? flatten([pointerObj]) : [];\nlet parents = getParents(rootFlat, pointer);\nlet result = filterFlat(pointerFlat, crit);\nmsg.sub = {\n    result,\n    parents,\n    flatten: pointerFlat\n}\n\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj;\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return foundObj;\n}\n\nfunction flatten(arr, level = 0, filter = {}, parentId = null) {\n    const filterKeys = Object.keys(filter);\n    return arr.reduce((acc, { id, children, ...rest }) => {\n        const flattenedChildren = children ? flatten(children, level + 1, filter, id) : [];\n        const flattenedObject = { ...rest, id, level, parentId };\n        if (filterKeys.every(key => flattenedObject[key] === filter[key])) {\n            return [...acc, flattenedObject, ...flattenedChildren];\n        }\n        return acc.concat(flattenedChildren);\n    }, []);\n}\n\nfunction filterFlat(flatObj, crit) {\n    return flatObj.filter(x => {\n        let params = [];\n        crit.forEach(c => {\n            let rs = false;\n            if (Array.isArray(c.val)) {\n                rs = c.val.some(s => x[c.key] === s)\n            } else {\n                rs = x[c.key] === c.val\n            }\n            params.push(rs);\n        });\n        return params.reduce((acc, val) => acc && val, true);\n    });\n}\n\nfunction getParents(flatObj, childId) {\n    let parents = [];\n    let child = flatObj.find(x => x.id === childId);\n    if(child){\n        parents.push(child);\n        do {\n            let parent = (child) ? flatObj.find(x => x.id === child.parentId) : [];\n            parents.push(parent);\n            child = parent;\n        }\n        while (child && child.parentId != null);\n    }\n    return parents;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5acd4c3122e3cf4d",
        "type": "cloudantplus in",
        "z": "f804f4dc33b60992",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "83a00b6f98e03567"
            ]
        ]
    },
    {
        "id": "bfe21c560c82d092",
        "type": "function",
        "z": "f804f4dc33b60992",
        "name": "prepare key",
        "func": "msg.payload = {\n    key: ['hierarchy', 'area']\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "5acd4c3122e3cf4d"
            ]
        ]
    },
    {
        "id": "f6e36d93f7d62631",
        "type": "function",
        "z": "44e549ae5408d3d3",
        "name": "function 12",
        "func": "let { obj, key, val } = msg.sub;\nlet nest = findNestedObj(obj, key, val);\nmsg.sub = nest;\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj;\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return foundObj;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5ed00e5c9996b0ba",
        "type": "function",
        "z": "63baa18a398cf25b",
        "name": "mapping sub result",
        "func": "let { obj, scopes } = msg.sub;\nlet rs = [];\nlet combineObj = [];\nif (Array.isArray(scopes)) {\n    scopes.forEach(scope => {\n        let items = findNestedObj(obj, 'id', scope.ids);\n        let flat = flatten(items);\n        let fullFLat = flatten(obj);\n        let parents = getParents(fullFLat, scope.ids);\n        flat[0].parentId = parents[0].parentId;\n        parents.shift();\n        rs.push(parents.sort().reverse().concat(flat));\n    });\n}\ncombineObj = combineArrays(...rs);\n\nmsg.sub = combineObj;\n\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj = [];\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return [foundObj];\n}\n\nfunction flatten(arr, level = 0, filter = {}, parentId = null) {\n    const filterKeys = Object.keys(filter);\n    return arr.reduce((acc, { id, children, ...rest }) => {\n        const flattenedChildren = children ? flatten(children, level + 1, filter, id) : [];\n        const flattenedObject = { ...rest, id, level, parentId };\n        if (filterKeys.every(key => flattenedObject[key] === filter[key])) {\n            return [...acc, flattenedObject, ...flattenedChildren];\n        }\n        return acc.concat(flattenedChildren);\n    }, []);\n}\n\nfunction getParents(flatObj, childId) {\n    let parents = [];\n    let child = flatObj.find(x => x.id === childId);\n    if (child) {\n        parents.push(child);\n        do {\n            let parent = (child) ? flatObj.find(x => x.id === child.parentId) : [];\n            if (parent) parents.push(parent);\n            child = parent;\n        }\n        while (child && child.parentId != null);\n    }\n    return parents;\n}\n\nfunction combineArrays(...arrays) {\n    const combinedArray = [].concat(...arrays);\n    const uniqueObject = {};\n    const uniqueArray = [];\n\n    for (let obj of combinedArray) {\n        const objString = JSON.stringify(obj);\n        if (!uniqueObject[objString]) {\n            uniqueObject[objString] = true;\n            uniqueArray.push(obj);\n        }\n    }\n\n    return uniqueArray;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7a88b9a6f510af6e",
        "type": "function",
        "z": "63baa18a398cf25b",
        "name": "function 14",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "5ed00e5c9996b0ba"
            ]
        ]
    },
    {
        "id": "a913be707788b4a3",
        "type": "subflow:63baa18a398cf25b",
        "z": "25a729f30c43b341",
        "name": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "d6d816aa7d1fd15a"
            ]
        ]
    },
    {
        "id": "e3217c7e3ff0b0fd",
        "type": "cloudantplus in",
        "z": "25a729f30c43b341",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "06ba7a2d683fd8ee"
            ]
        ]
    },
    {
        "id": "7f0d668f43a58f56",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get scope by code",
        "func": "msg.ori = msg.sub;\nmsg.payload = `scope:${msg.ori.scopeCode}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "21f9205ec0644936"
            ]
        ]
    },
    {
        "id": "06ba7a2d683fd8ee",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "prepare sub",
        "func": "msg.sub = {\n    obj: msg.payload[0].value.data,\n    scopes: msg.scope.data\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "a913be707788b4a3"
            ]
        ]
    },
    {
        "id": "915a77b65f7aa5ff",
        "type": "cloudantplus in",
        "z": "25a729f30c43b341",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "cafade7146ea2c39"
            ]
        ]
    },
    {
        "id": "cafade7146ea2c39",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get area hierarchy",
        "func": "msg.scope = msg.payload[0].value;\nmsg.payload = {\n    key: [\"hierarchy\", \"area\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "e3217c7e3ff0b0fd"
            ]
        ]
    },
    {
        "id": "f8bd74c6b30d97c4",
        "type": "redis-command",
        "z": "25a729f30c43b341",
        "server": "0fb96b870afb5c15",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 760,
        "y": 160,
        "wires": [
            [
                "074973f584ae3ece"
            ]
        ]
    },
    {
        "id": "21f9205ec0644936",
        "type": "redis-command",
        "z": "25a729f30c43b341",
        "server": "0fb96b870afb5c15",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "f240a561dacceaa9"
            ]
        ]
    },
    {
        "id": "f240a561dacceaa9",
        "type": "switch",
        "z": "25a729f30c43b341",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "534e74173a3dea50"
            ],
            [
                "0a60a67d15c726a8"
            ]
        ]
    },
    {
        "id": "534e74173a3dea50",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get scope by code",
        "func": "msg.payload = {\n    key: msg.ori.scopeCode\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "915a77b65f7aa5ff"
            ]
        ]
    },
    {
        "id": "d6d816aa7d1fd15a",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "save to redis",
        "func": "/**to set expire set topic into null\n * and set payload to an Array with EX on it [topic, value, EX, ex-value]\n */\nmsg.payload = [`scope:${msg.ori.scopeCode}`, JSON.stringify(msg.sub), 'EX', 5 * 60];\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 120,
        "wires": [
            [
                "f8bd74c6b30d97c4"
            ]
        ]
    },
    {
        "id": "0a60a67d15c726a8",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "return from redis",
        "func": "msg.sub = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "074973f584ae3ece",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "return value",
        "func": "msg.sub = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "07090842a5b11d57",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-configs",
        "service": "_ext_",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 560,
        "y": 100,
        "wires": [
            [
                "f146b2e3f30c2aa6"
            ]
        ]
    },
    {
        "id": "4b306d7cfa8e7656",
        "type": "change",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "smart-apps",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "07090842a5b11d57"
            ]
        ]
    },
    {
        "id": "f146b2e3f30c2aa6",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "check apps",
        "func": "let id = msg.req.params.id;\nmsg.found = msg.payload.data.some(x => x.code === id);\nif(msg.found){\n    msg.result = msg.payload.data.find(x => x.code === id);\n    msg.payload = {\n        key: [\"schema\", \"page\"]\n    }\n}else{\n    msg.payload = \"not found\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "db6e97c260d1ad13"
            ]
        ]
    },
    {
        "id": "db6e97c260d1ad13",
        "type": "switch",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "property": "found",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "23aca37ca7c75333"
            ],
            [
                "5c0bb31de63a7815"
            ]
        ]
    },
    {
        "id": "5c0bb31de63a7815",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "5ad004fefd0a0e7a",
        "type": "http in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "url": "/api/apps/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "8645128bc12f8fb7"
            ]
        ]
    },
    {
        "id": "8645128bc12f8fb7",
        "type": "switch",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "4b306d7cfa8e7656"
            ],
            [
                "ab1667e945489ac4"
            ]
        ]
    },
    {
        "id": "a11a2132155a3611",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 800,
        "y": 280,
        "wires": []
    },
    {
        "id": "ab1667e945489ac4",
        "type": "change",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "bad parameters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 280,
        "wires": [
            [
                "a11a2132155a3611"
            ]
        ]
    },
    {
        "id": "23aca37ca7c75333",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-blueprint",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "type-topic",
        "x": 820,
        "y": 60,
        "wires": [
            [
                "30e7957e06e98573"
            ]
        ]
    },
    {
        "id": "30e7957e06e98573",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "function 1",
        "func": "msg.result['pages'] = msg.payload.map(x => x.value);\nmsg.payload = {\n    key : msg.req.params.id\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 100,
        "wires": [
            [
                "8601b3ec70802672"
            ]
        ]
    },
    {
        "id": "cd0e89b2981e6227",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "8601b3ec70802672",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-blueprint",
        "service": "_ext_",
        "search": "_view_",
        "design": "navigations",
        "index": "all-navs",
        "x": 820,
        "y": 140,
        "wires": [
            [
                "bec2818cfb56c788"
            ]
        ]
    },
    {
        "id": "bec2818cfb56c788",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "function 2",
        "func": "let id = msg.req.params.id;\nmsg.result['navigation'] = msg.payload.find(x => x.value.applicationID === id)?.value;\nmsg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            [
                "cd0e89b2981e6227"
            ]
        ]
    },
    {
        "id": "cc2ca5ee337e0870",
        "type": "http in",
        "z": "10a453599cf0bfe0",
        "name": "",
        "url": "/api/forms/road-condition",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "640e8c66f45f9c26",
                "740317eedd570707"
            ]
        ]
    },
    {
        "id": "740317eedd570707",
        "type": "http response",
        "z": "10a453599cf0bfe0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "640e8c66f45f9c26",
        "type": "debug",
        "z": "10a453599cf0bfe0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "2a4feb8a87d0a7c4",
        "type": "http in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "url": "/api/auth/sign-in",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "1139aaeb805d591e"
            ]
        ]
    },
    {
        "id": "9ed6e261b82dc55d",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "24dfaa402842999c",
        "type": "cloudantplus in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-users",
        "service": "_ext_",
        "search": "_view_",
        "design": "view-user",
        "index": "by-nik",
        "x": 590,
        "y": 140,
        "wires": [
            [
                "b3f14e2a3a967408"
            ]
        ]
    },
    {
        "id": "1139aaeb805d591e",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "check body",
        "func": "let {nik, password} = msg.payload;\nlet isValid = false;\nif(nik && password){\n    isValid = true;\n    msg.payload = {\n        key: nik\n    }\n}\nmsg.isValid = isValid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "5dbfca463b8f94ea"
            ]
        ]
    },
    {
        "id": "b3f14e2a3a967408",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "f76eb5c7ca814e7f"
            ],
            [
                "f55844213af658cb"
            ]
        ]
    },
    {
        "id": "c9f15de4fba5c2e0",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 940,
        "y": 280,
        "wires": []
    },
    {
        "id": "f55844213af658cb",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"user-not-found\",\"message\":\"user not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "c9f15de4fba5c2e0"
            ]
        ]
    },
    {
        "id": "f76eb5c7ca814e7f",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "prepare sub",
        "func": "msg.user = msg.payload[0].value;\nlet pass = msg.user.authorizations.find(x => x.type === 'password').passwords\nmsg.sub = pass[pass.length - 1];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 60,
        "wires": [
            [
                "12be102bd5a5549e"
            ]
        ]
    },
    {
        "id": "12be102bd5a5549e",
        "type": "subflow:c2f437acbbab02bd",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 960,
        "y": 100,
        "wires": [
            [
                "0460f41c928aef8f"
            ]
        ]
    },
    {
        "id": "0460f41c928aef8f",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "check account",
        "func": "let isValid = false;\nlet {nik, password} = msg.req.body;\nif(`${nik};${password}` === msg.sub){\n    isValid = true;\n    msg.sub = msg.user\n}\nmsg.isValid = isValid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "5ef56066432171ba"
            ]
        ]
    },
    {
        "id": "ab91fa5df5761e58",
        "type": "subflow:77002254b872fa8e",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 1180,
        "y": 60,
        "wires": [
            [
                "20f7357695b26aa8"
            ]
        ]
    },
    {
        "id": "5ef56066432171ba",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 180,
        "wires": [
            [
                "ab91fa5df5761e58"
            ],
            [
                "982ba459a96640b9"
            ]
        ]
    },
    {
        "id": "11fc9ef3ad64cf3c",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1180,
        "y": 260,
        "wires": []
    },
    {
        "id": "982ba459a96640b9",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"not-authorized\",\"message\":\"account not authorized\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "11fc9ef3ad64cf3c"
            ]
        ]
    },
    {
        "id": "5dbfca463b8f94ea",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "24dfaa402842999c"
            ],
            [
                "1b09477332150a88"
            ]
        ]
    },
    {
        "id": "96353977042ba7f3",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "1b09477332150a88",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"invalid-parameter\",\"message\":\"check your parameters\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "96353977042ba7f3"
            ]
        ]
    },
    {
        "id": "946615b5dff60503",
        "type": "cloudantplus in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 1180,
        "y": 140,
        "wires": [
            [
                "17cf590e3d949f01"
            ]
        ]
    },
    {
        "id": "17cf590e3d949f01",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "prepare sub",
        "func": "msg.sub = {\n    obj: msg.payload[0].value.data,\n    key: 'code',\n    val: (msg.result.decoded.roles.system.length > 0) ? msg.result.decoded.roles.system[0] : null\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 60,
        "wires": [
            [
                "33feea6c9732727e"
            ]
        ]
    },
    {
        "id": "3b111b6afac1790d",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "return",
        "func": "msg.payload = {...msg.result, systemRole: msg.sub};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 140,
        "wires": [
            [
                "9ed6e261b82dc55d"
            ]
        ]
    },
    {
        "id": "20f7357695b26aa8",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "set result",
        "func": "msg.result = msg.sub;\nmsg.payload = {\n    key: [\"reference\", \"smart-system-role\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "946615b5dff60503"
            ]
        ]
    },
    {
        "id": "33feea6c9732727e",
        "type": "subflow:44e549ae5408d3d3",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "3b111b6afac1790d"
            ]
        ]
    },
    {
        "id": "d2f18a6f7f6e0afd",
        "type": "promptinput",
        "z": "786b2ecce5602d44",
        "name": "",
        "datatype": "str",
        "prompt": "",
        "property": "payload",
        "propertyType": "msg",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "58cf8fb4e8bd7ff9"
            ]
        ]
    },
    {
        "id": "818230ca98664d48",
        "type": "debug",
        "z": "786b2ecce5602d44",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "58cf8fb4e8bd7ff9",
        "type": "change",
        "z": "786b2ecce5602d44",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "24214884693edfa2",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `select * from digaportal.v_getsysroleuser2`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "40248a209f3fdb0c"
            ]
        ]
    },
    {
        "id": "40248a209f3fdb0c",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "dd4fb4fce5680691"
            ]
        ]
    },
    {
        "id": "f183a287ee95d591",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 120,
        "wires": []
    },
    {
        "id": "dd4fb4fce5680691",
        "type": "change",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "users",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"keys\":[[\"reference\",\"smart-corp-role\"],[\"reference\",\"smart-system-role\"]]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "99dafc8417f56638"
            ]
        ]
    },
    {
        "id": "99dafc8417f56638",
        "type": "cloudantplus in",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "f5aa11d58f518d50"
            ]
        ]
    },
    {
        "id": "f5aa11d58f518d50",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "mapping result",
        "func": "msg.corpRole = msg.payload.find(x => x.key[1] === 'smart-corp-role').value.data;\nmsg.systemRole = msg.corpRole = msg.payload.find(x => x.key[1] === 'smart-system-role').value.data;\nlet users = msg.users.map(x => {\n    let algorithm = 'aes256';\n    let key = env.get('CRYPTO_KEY');\n    let iv = env.get('CRYPTO_IV');\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\n    let encrypted = cipher.update(`${x.NIK};pass`, 'utf8', 'hex') + cipher.final('hex');\n    let type = 'non-adfs';\n    if (/^\\d+$/.test(x.NIK) && x.NIK.length === 8) type = 'adfs';\n\n    return {\n        nik: x.NIK,\n        type: type,\n        fullName: x.szFullName,\n        email: x.szEmailAddress,\n        occupation: msg.corpRole.find(r => r.origin === x.szCorpRoleName)?.code || null,\n        roles: {\n            corp: msg.corpRole.find(r => r.origin === x.szCorpRoleName)?.code || null,\n            system: msg.systemRole.filter(r => r.origin === x.szSysRoleName).map(r => r.code) || null\n        },\n        authorizations: [\n            {\n                type: 'password',\n                passwords: [encrypted]\n            }\n        ]\n    }\n});\nmsg.documents = {\n    docs: users\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "8f9ff0f95018dd01"
            ]
        ]
    },
    {
        "id": "36b892547277fd3e",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 120,
        "wires": [
            [
                "f183a287ee95d591"
            ]
        ]
    },
    {
        "id": "8f9ff0f95018dd01",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "delete database",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "292e9cb262adf6cc"
            ]
        ]
    },
    {
        "id": "292e9cb262adf6cc",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "create database",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "b6ef183ef6f342f9"
            ]
        ]
    },
    {
        "id": "b6ef183ef6f342f9",
        "type": "change",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "documents",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 80,
        "wires": [
            [
                "36b892547277fd3e"
            ]
        ]
    },
    {
        "id": "be7488b241be2426",
        "type": "promptinput",
        "z": "35d2cc8d792ddb2a",
        "name": "confirm",
        "datatype": "str",
        "prompt": "this process will overwriten smart-users data, are you sure ? yes / no",
        "property": "payload",
        "propertyType": "msg",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "e76b6489929bdac5"
            ]
        ]
    },
    {
        "id": "e76b6489929bdac5",
        "type": "switch",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "24214884693edfa2"
            ]
        ]
    },
    {
        "id": "5b4debb4c819653b",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `\nselect\n\ttab.iOrgID,\n\tvalRef.szValueRef as cCategory,\n\ttab.szOrgName as ChildName,\n\ttab.szDescription as ChildDesc,\n\tparent.iOrgID as ParentID,\n\tparRef.szValueRef as pCategory,\n\tparent.szOrgName as ParentName,\n\tparent.szDescription as ParentDesc\nfrom\n\tdigaportal.oa_organization tab\nleft join digaportal.oa_organization parent on\n\ttab.szParentOrgID = parent.iOrgID\nleft join digaportal.gn_valueref valRef on\n\ttab.iOrgCatID = valRef.iValueRefID\nleft join digaportal.gn_valueref parRef on\n\tparent.iOrgCatID = parRef.iValueRefID\norder by\n\ttab.iOrgID\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "39b354d40ed8a1be"
            ]
        ]
    },
    {
        "id": "39b354d40ed8a1be",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 300,
        "y": 340,
        "wires": [
            [
                "99053d0de0ebc04b"
            ]
        ]
    },
    {
        "id": "c6797d015f1c1a35",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "99053d0de0ebc04b",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "function 3",
        "func": "let root = msg.payload.filter(x => x.cCategory === 'PSM');\nlet rs = [];\nroot.forEach(x => {\n    rs.push({\n        id: x.iOrgID,\n        name: x.ChildName.toUpperCase(),\n        desc: x.ChildDesc,\n        category: x.cCategory.toUpperCase(),\n        children: getChildren(msg.payload, x.iOrgID)\n    });\n});\nmsg.payload = rs;\nreturn msg;\n\nfunction getChildren(data, parentID, limit = 0) {\n    if (limit > 10) {\n        return;\n    }\n    let result = [];\n    for (let i = 0; i < data.length; i++) {\n        let item = data[i];\n        if (item.ParentID === parentID) {\n            result.push({\n                id: item.iOrgID,\n                name: item.ChildName.toUpperCase(),\n                desc: item.ChildDesc,\n                category: item.cCategory.toUpperCase(),\n                children: (data.some(x => x.ParentID === parentID)) ? getChildren(data.filter(x => x.ParentID === parentID), item.iOrgID, limit + 1) : null\n            })\n        }\n    }\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "c6797d015f1c1a35"
            ]
        ]
    },
    {
        "id": "9a395cb0556025f3",
        "type": "inject",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "5b4debb4c819653b"
            ]
        ]
    },
    {
        "id": "5074b4b5d2488f4c",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `\nselect\n\tszValueRef as label,\n\tszValueRefDescription as description,\n\tszCategory as category,\n\tszCategory2 as category2,\n\tszCategory3 as category3,\n\tszCategory4 as category4,\n\tszCategory5 as category5\nfrom\n\tgn_valueref gv\norder by\n\tszCategory,\n\tszCategory2,\n\tszCategory3,\n\tszCategory4,\n\tszCategory5\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "53b9204cb4d470b1"
            ]
        ]
    },
    {
        "id": "53b9204cb4d470b1",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "a78e0a347e852e3d"
            ]
        ]
    },
    {
        "id": "d616f6a00d4a5f6d",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 540,
        "wires": []
    },
    {
        "id": "a78e0a347e852e3d",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "function 4",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "d616f6a00d4a5f6d"
            ]
        ]
    },
    {
        "id": "5270905cc4ac9962",
        "type": "inject",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "5074b4b5d2488f4c"
            ]
        ]
    },
    {
        "id": "9ae2b5c84660f97f",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "e55f4d0f605df90a"
            ]
        ]
    },
    {
        "id": "54ae63fd2179cae5",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "e55f4d0f605df90a",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = {\n    nik: '09001040',\n    fullName: 'Ahmad Nuroffiq',\n    email: 'staff.rc.pmse@sinarmas-agri.com',\n    occupation: 'RCS',\n    roles: ['SFR']\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "5a727d33d0fe446c"
            ]
        ]
    },
    {
        "id": "5a727d33d0fe446c",
        "type": "subflow:77002254b872fa8e",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "54ae63fd2179cae5"
            ]
        ]
    },
    {
        "id": "a77291f3c5c33cc0",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "1755b545d754801e"
            ]
        ]
    },
    {
        "id": "993afa7afcd3c77b",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 240,
        "wires": []
    },
    {
        "id": "1755b545d754801e",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "// msg.sub = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWsiOiIwOTAwMTA0MCIsImZ1bGxOYW1lIjoiQWhtYWQgTnVyb2ZmaXEiLCJlbWFpbCI6InN0YWZmLnJjLnBtc2VAc2luYXJtYXMtYWdyaS5jb20iLCJvY2N1cGF0aW9uIjoiUkNTIiwicm9sZXMiOlsiU0ZSIl0sImlhdCI6MTY3NjYyMDE0MSwiZXhwIjoxNjc2NzkyOTQxfQ.LycdE5eTfYbAecB5cJ2JW8EQShn5NPpvDGxvP1qPq_c`;\nmsg.sub = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWsiOiIwOTAwMTA0MCIsImZ1bGxOYW1lIjoiQWhtYWQgTnVyb2ZmaXEiLCJlbWFpbCI6InN0YWZmLnJjLnBtc2VAc2luYXJtYXMtYWdyaS5jb20iLCJvY2N1cGF0aW9uIjoiUkNTIiwicm9sZXMiOlsiU0ZSIl0sImlhdCI6MTY3Njg2MTYyMywiZXhwIjoxNjc3MDM0NDIzfQ.2qCafDVE3C6NiO5V1Gt_PeKN5LSfc_1j1c-SLlkuWgw`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "a175eeab9871e24a"
            ]
        ]
    },
    {
        "id": "a175eeab9871e24a",
        "type": "subflow:32e9ed8660fb2fde",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "993afa7afcd3c77b"
            ]
        ]
    },
    {
        "id": "3e66c4a31f8d9450",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "7d867c3ead24190c"
            ]
        ]
    },
    {
        "id": "82e9d4324cdb2728",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "ee46f0cd97686a3b",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "5a0ec661e1909bfd"
            ]
        ]
    },
    {
        "id": "01da5252c1115b9a",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "f21bf607484f07da",
        "type": "subflow:0f802e687dcc9e4a",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 280,
        "y": 380,
        "wires": [
            [
                "82e9d4324cdb2728"
            ]
        ]
    },
    {
        "id": "7d867c3ead24190c",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = `MyPassword`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "f21bf607484f07da"
            ]
        ]
    },
    {
        "id": "85bdb66ce6238ce7",
        "type": "subflow:c9c1579a9da27745",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "01da5252c1115b9a"
            ]
        ]
    },
    {
        "id": "5a0ec661e1909bfd",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = {\n    password: 'MyPassword',\n    hash: '$2b$10$UsmqL2Pt3SwjJWXtAmT14OVEYUSiceuFL92gjQD/bEM.eWMWypqfi'\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "85bdb66ce6238ce7"
            ]
        ]
    },
    {
        "id": "28c35bf75fb40d3c",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "6e6b190070972e0d"
            ]
        ]
    },
    {
        "id": "aa11f6c7f9ace759",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 620,
        "wires": []
    },
    {
        "id": "6e6b190070972e0d",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare payload to encrypt",
        "func": "msg.sub = \"some random text\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 580,
        "wires": [
            [
                "046cff1505c0dc35"
            ]
        ]
    },
    {
        "id": "e6d2df7c5e4c084d",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "85ac96e7de1d3a13"
            ]
        ]
    },
    {
        "id": "14d0cc3b742d1f15",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 740,
        "wires": []
    },
    {
        "id": "85ac96e7de1d3a13",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare encrypt",
        "func": "msg.sub = \"d15cac3ea87e3fca0b51be2662c4e48135679b8ab52ab656ef3309e35d9e43d4\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 700,
        "wires": [
            [
                "e1957673de771643"
            ]
        ]
    },
    {
        "id": "046cff1505c0dc35",
        "type": "subflow:cfa2e326ca547b07",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "aa11f6c7f9ace759"
            ]
        ]
    },
    {
        "id": "e1957673de771643",
        "type": "subflow:c2f437acbbab02bd",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 300,
        "y": 740,
        "wires": [
            [
                "14d0cc3b742d1f15"
            ]
        ]
    },
    {
        "id": "95c371352dac6288",
        "type": "catch",
        "z": "bf22cd3c7ed55a35",
        "d": true,
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 760,
        "y": 100,
        "wires": [
            [
                "9c4c5aa5bc6d0c04"
            ]
        ]
    },
    {
        "id": "9c4c5aa5bc6d0c04",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 14",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "fba20105cfbaa67f",
        "type": "subflow:f804f4dc33b60992",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "env": [
            {
                "name": "test",
                "value": "afadfa",
                "type": "str"
            }
        ],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "c1f08ce0466fcbef"
            ]
        ]
    },
    {
        "id": "9eeb68915a120a70",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 200,
        "wires": [
            [
                "6328a57e47771e7b"
            ]
        ]
    },
    {
        "id": "6328a57e47771e7b",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare root, topic, pointer, criterya",
        "func": "msg.sub = {\n    root: 5008,\n    topic: 'area',\n    pointer: 5068,\n    crit: [\n        {\n            key: 'category',\n            val: 'BLOCK'\n        },\n        {\n            key: 'parentId',\n            val: 5128\n        }\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "fba20105cfbaa67f"
            ]
        ]
    },
    {
        "id": "c1f08ce0466fcbef",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 240,
        "wires": []
    },
    {
        "id": "f8d777bea3c0d2f3",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "sub",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "d9cb860952c43548"
            ]
        ]
    },
    {
        "id": "c6f1402a0e7d6be4",
        "type": "subflow:25a729f30c43b341",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "90258e6c5dbb6759"
            ]
        ]
    },
    {
        "id": "90258e6c5dbb6759",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 340,
        "wires": []
    },
    {
        "id": "d9cb860952c43548",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare nik & scope code",
        "func": "msg.sub = {\n    nik: 'N15000001',\n    scopeCode: 'SC-SAW-AREA-00001'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "c6f1402a0e7d6be4"
            ]
        ]
    }
]