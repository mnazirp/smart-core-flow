[
    {
        "id": "68f1d2b77bbdcda6",
        "type": "tab",
        "label": "Smart: Apps",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10a453599cf0bfe0",
        "type": "tab",
        "label": "Smart: Forms",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3a3a41a0d95d74c4",
        "type": "tab",
        "label": "Smart: Auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "35d2cc8d792ddb2a",
        "type": "tab",
        "label": "Migrations",
        "disabled": false,
        "info": "// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "bf22cd3c7ed55a35",
        "type": "tab",
        "label": "R&D",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c13d19c3dfb652c9",
        "type": "tab",
        "label": "Smart: Scope",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ee186eb42c82e4f",
        "type": "tab",
        "label": "Admin: User",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bef67a5c91d12113",
        "type": "tab",
        "label": "Admin: Hierarchy",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "50baf2723fb4853b",
        "type": "tab",
        "label": "Admin: Libs",
        "disabled": false,
        "info": "// nrlint function-eslint:off\n",
        "env": []
    },
    {
        "id": "d0ef491d8730ea48",
        "type": "tab",
        "label": "Smart: Blueprint",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2e56a74c132aeaaf",
        "type": "tab",
        "label": "Hino",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "06108b8ace191ff7",
        "type": "tab",
        "label": "Admin: Scope",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20bd6215ce29ada7",
        "type": "tab",
        "label": "Smart: Select Options",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a4022757bfcb244",
        "type": "tab",
        "label": "Sawber: Estimation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "522bd2fdb3945ed1",
        "type": "tab",
        "label": "KTB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c5b9039a5fc48f97",
        "type": "tab",
        "label": "GeoJSON",
        "disabled": false,
        "info": "// nrlint no-loops:off, function-eslint:off\n",
        "env": []
    },
    {
        "id": "d13820078197e616",
        "type": "tab",
        "label": "Vehicle Tracking",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f26db8e574ea05fe",
        "type": "tab",
        "label": "CouchDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77002254b872fa8e",
        "type": "subflow",
        "name": "algo: jwt-sign",
        "info": "## input:\r\non msg.sub assign an object like this:\r\n\r\n\r\n    {        \r\n        nik: '', \r\n        fullName: '',\r\n        email: '',\r\n        occupation: '',\r\n        roles: ['']\r\n    }\r\n\r\n\r\n\r\n## output:\r\ninside msg.sub:\r\n\r\n\r\n\r\n    {\r\n        token: 'eyJhbGciOiJIUzI1NiI...',\r\n        decoded: {}  \r\n    }\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "156f4bd7081013b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "156f4bd7081013b2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "32e9ed8660fb2fde",
        "type": "subflow",
        "name": "algo: jwt-verify",
        "info": "## input:\non msg.sub assign an a token string like this:\n\n\n    'eyJhbGciOiJIUzI1NiI...'\n\n\n## output:\ninside msg.sub:\n\n\n\n    {\n        token: 'eyJhbGciOiJIUzI1NiI...',\n        decoded: {},\n        error: {\n            message: 'jwt expired',\n            stack: '',\n            arguments: null,\n            name: 'TokenExpiredError',\n            expiredAt: '2023-02-19T07:49:01.000Z'\n        }  \n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "98d349474a76dad2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "98d349474a76dad2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0f802e687dcc9e4a",
        "type": "subflow",
        "name": "algo: hashing",
        "info": "## Input\r\nset msg.sub with the password string that neet to be hashing\r\n\r\n    `MyPassword`\r\n\r\n## Output\r\nit will produce msg.sub a hasing string\r\n\r\n    ``\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "ae6193f87f0b9e1e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "ae6193f87f0b9e1e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c9c1579a9da27745",
        "type": "subflow",
        "name": "algo: hashing-compare",
        "info": "## Input\r\nassign msg.sub with an object:\r\n\r\n    {\r\n        password: 'MyPassword',\r\n        hash: '$2b$10$...'\r\n    }\r\n\r\n## Output\r\nit will produce msg.sub with object:\r\n\r\n    {\r\n        isValid: true //or false\r\n    }\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c1d5ea079e920d21"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c1d5ea079e920d21",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cfa2e326ca547b07",
        "type": "subflow",
        "name": "algo: crypto-encrypt",
        "info": "## Input\r\nset msg.sub into a string that want to encrypt\r\n\r\n    msg.sub = \"some random text\"\r\n\r\n## output\r\nit will produce encrypted text in msg.sub\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a91ed5f774324e22"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "a91ed5f774324e22",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c2f437acbbab02bd",
        "type": "subflow",
        "name": "algo: crypto-dencrypt",
        "info": "## Input\r\nassign msg.sub with encrypted text like:\r\n\r\n    msg.sub = \"d15cac3ea87e3fca0b51b\"\r\n\r\n## output\r\nit will produce dencrypted text in msg.sub\r\n\r\n// nrlint function-eslint:off\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "1dc8e5a1237fe665"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "1dc8e5a1237fe665",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f804f4dc33b60992",
        "type": "subflow",
        "name": "sub: search-on-hierarchy",
        "info": "## Input on msg.sub\r\n\r\n    msg.sub = {\r\n        topic: 'area',\r\n        root: 5001,\r\n        pointer: 5068,\r\n        crit: [\r\n            {\r\n                key: 'category',\r\n                val: 'BLOCK'\r\n            }\r\n        ]\r\n    }\r\n\r\n`topic` is a topic for hierarchy in couchdb \r\n\r\n`root` is an id as starting point of all hierarchy tree \r\n\r\n`pointer` is starting point to search by id inside tree\r\n\r\n`crit` as a filter to define the final result\r\n\r\n## Output on msg.sub\r\n\r\n    msg.sub = {\r\n        result,\r\n        parents,\r\n        flatten\r\n    }\r\n\r\n`result` is the result after filter by criteria\r\n\r\n`parents` contains all superior node starting from pointer id\r\n\r\n`flatten` contains all flatten objects starting at pointer ",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "bfe21c560c82d092"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "83a00b6f98e03567",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "44e549ae5408d3d3",
        "type": "subflow",
        "name": "algo: find-nested",
        "info": "# Input\r\n\r\n### msg.sub\r\n\r\n    {\r\n        obj: msg.payload[0].data,\r\n        key: 'name',\r\n        val: scope\r\n    }",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f6e36d93f7d62631"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 100,
                "wires": [
                    {
                        "id": "f6e36d93f7d62631",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "63baa18a398cf25b",
        "type": "subflow",
        "name": "algo: nested-find-flatten",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "5ed00e5c9996b0ba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 100,
                "wires": [
                    {
                        "id": "5ed00e5c9996b0ba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "25a729f30c43b341",
        "type": "subflow",
        "name": "sub: get-scope-by-code",
        "info": "## Input\r\nassign msg.sub with string scope code like this:\r\n\r\n    \"SC-SAW-SIAK-00001\"\r\n\r\n## output\r\nit will an array of scopes in msg.sub\r\n\r\n    [\r\n        {\r\n            \"name\": \"UPSTREAM\",\r\n            \"desc\": \"UPSTREAM\",\r\n            \"category\": \"US\",\r\n            \"id\": 5001,\r\n            \"level\": 0,\r\n            \"parentId\": null\r\n        },\r\n        {\r\n            \"name\": \"DIRSERVICE\",\r\n            \"desc\": \"Directorate Service\",\r\n            \"category\": \"DIRECTORATE\",\r\n            \"id\": 5005,\r\n            \"level\": 1,\r\n            \"parentId\": 5001\r\n        },\r\n    ]\r\n\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "7f0d668f43a58f56"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 360,
                "wires": [
                    {
                        "id": "0a60a67d15c726a8",
                        "port": 0
                    },
                    {
                        "id": "b1937dbaaed86b43",
                        "port": 0
                    },
                    {
                        "id": "d23e487ead152956",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dbbf76b23c84dc6a",
        "type": "subflow",
        "name": "sub: get-scopes",
        "info": "## Input\r\nassign msg.sub with object like this:\r\n\r\n    {\r\n        \"useCombo\": false,\r\n        \"areaCode\": \"SC-SAW-SIAK-00001\",\r\n        \"combo\": \"COMB-00001\",\r\n        \"sitemapCode\": \"SC-SAW-SIAK-00001\",\r\n        \"organizationCode\": \"SC-SAW-SIAK-00001\"\r\n    }\r\n\r\n## output\r\nit will produce the same object with scopes in msg.sub\r\n\r\n    [\r\n        {\r\n            \"type\": \"area\",\r\n            \"code\": \"SC-SAW-SIAK-00001\",\r\n            \"scopes\": []\r\n        },\r\n        {\r\n            \"type\": \"sitemap\",\r\n            \"code\": \"SC-SAW-SIAK-00001\",\r\n            \"scopes\": []\r\n        },\r\n        {\r\n            \"type\": \"organization\",\r\n            \"code\": \"SC-SAW-SIAK-00001\",\r\n            \"scopes\": []\r\n        },\r\n    ]\r\n\r\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "0a73e980ab04f0d2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1500,
                "y": 280,
                "wires": [
                    {
                        "id": "5646d036e73912b8",
                        "port": 0
                    },
                    {
                        "id": "ff3e5c5f37383acb",
                        "port": 1
                    },
                    {
                        "id": "1442ce309155c0cb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9e1a5ed360837111",
        "type": "subflow",
        "name": "sub: get-page-by-id",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "de59eeb7a3e9990b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 220,
                "wires": [
                    {
                        "id": "bc03ea4c02e4f058",
                        "port": 0
                    },
                    {
                        "id": "e2804e8e36bdb441",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "34c9e2e17c31980a",
        "type": "subflow",
        "name": "sub: geojson-pnmp-get",
        "info": "# Input\n\n### sub input\n\n    {\n        scopeType: 'psm',\n        ref1: psm,\n        ref2: null,\n        ref3: null\n    }\n\n### sub output\n\n    {\n        \n    }",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "49913bb8653ecfe9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1360,
                "y": 420,
                "wires": [
                    {
                        "id": "b5780a4c4612bc87",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d7ccf53b2b9fe097",
        "type": "subflow",
        "name": "sub: couch-view-get",
        "info": "## input\r\n\r\nmsg.sub\r\n\r\n    {\r\n        database: 'smart-geojson',\r\n        design: 'division',\r\n        view: 'geo-by-estate',\r\n        key: ['PSM 5', 'LIBE']\r\n    }\n\n// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "09ce6f4f9faad7e1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 160,
                "wires": [
                    {
                        "id": "7af2625f0ad3a7a3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "183547d77875ed65",
        "type": "subflow",
        "name": "sub: redis-set",
        "info": "## Input\r\n\r\nmsg.sub\r\n\r\n    {\r\n        key: msg.redisKey,\r\n        payload: JSON.stringify(payload),\r\n        ttl: Number(env.get('NODERED_TTL')) * 60\r\n    }\r\n",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "6ef494b5ccc166ea"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f0ae825b26a06b48",
        "type": "subflow",
        "name": "sub: couch-bulk-insert",
        "info": "## Input\r\n\r\nmsg.sub\r\n\r\n    {\r\n        database: 'smart-tracking',\r\n        docs: docs\r\n    }\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8cc48b7d698dead4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 160,
                "wires": [
                    {
                        "id": "45ba03c6a9768c57",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7075118feab4d811",
        "type": "subflow",
        "name": "sub: geojson-redis-get",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "2620133002dbd2f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 60,
                "wires": [
                    {
                        "id": "2620133002dbd2f4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2cfd802f51415515",
        "type": "subflow",
        "name": "sub: geojson-couchdb-get",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "3183d03b99f891d5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 200,
                "wires": [
                    {
                        "id": "45fa618254c2782e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "188768fc5fe509fd",
        "type": "subflow",
        "name": "sub: pnmp-basemap",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "bb765dc76a562151"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 80,
                "wires": [
                    {
                        "id": "a7ca5ffbce7ac4a7",
                        "port": 0
                    },
                    {
                        "id": "f4842fd4e028e2af",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3c790259a2397aef",
        "type": "subflow",
        "name": "sub: geojson-bulk-delete-insert",
        "info": "// nrlint function-eslint:off\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "124d7410ca5363a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 280,
                "wires": [
                    {
                        "id": "983841bc2a8d699f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "784d89e62dfb5070",
        "type": "cloudantplus",
        "host": "${DOCKER_COUCHDB}",
        "name": "docker-couchdb",
        "useapikey": false
    },
    {
        "id": "9dc2644ec5b51cb2",
        "type": "mysql2-server",
        "host": "${DOCKER_MYSQL_HOST}",
        "port": "${DOCKER_MYSQL_PORT}",
        "username": "${DOCKER_MYSQL_USER}",
        "password": "password",
        "db": "${DOCKER_MYSQL_DBNAME}",
        "servername": "DOCKER_MYSQL"
    },
    {
        "id": "0fb96b870afb5c15",
        "type": "redis-config",
        "name": "DOCKER_REDIS",
        "options": "DOCKER_REDIS_URL",
        "cluster": false,
        "optionsType": "env"
    },
    {
        "id": "3cc67d60c90e6c5d",
        "type": "redis-config",
        "name": "DOCKER_REDIS_TS",
        "options": "DOCKER_REDIS_TS_URL",
        "cluster": false,
        "optionsType": "env"
    },
    {
        "id": "7f9d98d6c341571a",
        "type": "MySQLdatabase",
        "name": "DOCKER_MYSQL2",
        "host": "${DOCKER_MYSQL_HOST}",
        "port": "${DOCKER_MYSQL_PORT}",
        "db": "${DOCKER_MYSQL_DBNAME}",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "156f4bd7081013b2",
        "type": "function",
        "z": "77002254b872fa8e",
        "name": "jwt sign",
        "func": "try {\n    let secret = env.get('JWTSECRET');\n    let options = { expiresIn: '2 days' };\n    let token = jwt.sign(msg.sub, secret, options);\n    let decoded = jwt.verify(token, secret);\n    msg.sub = token;\n} catch (error) {\n    msg.sub = null;\n    msg.error = error.message;\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "98d349474a76dad2",
        "type": "function",
        "z": "32e9ed8660fb2fde",
        "name": "jwt verify",
        "func": "try {\n    let secret = env.get('JWTSECRET');\n    let error = null;\n    let decoded = null;\n    jwt.verify(msg.sub, secret, (err, dec) => {\n        if (err) error = err;\n        decoded = dec;\n    });\n    msg.sub = {\n        token: msg.sub,\n        decoded: decoded,\n        error: error\n    }\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ae6193f87f0b9e1e",
        "type": "function",
        "z": "0f802e687dcc9e4a",
        "name": "hashing",
        "func": "try {\n    let pass = bcrypt.hashSync(msg.sub, 10);\n    msg.sub = pass;\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcryptjs"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c1d5ea079e920d21",
        "type": "function",
        "z": "c9c1579a9da27745",
        "name": "compare",
        "func": "try {\n    let { password, hash } = msg.sub;\n    let rs = '';\n    rs = bcrypt.compareSync(password, hash);\n    msg.sub = {\n        isValid: rs\n    };\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcryptjs"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a91ed5f774324e22",
        "type": "function",
        "z": "cfa2e326ca547b07",
        "name": "crypto-encrypt",
        "func": "try {\n    let algorithm = 'aes256';\n    let key = env.get('CRYPTO_KEY');\n    let iv = env.get('CRYPTO_IV');\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\n    let encrypted = cipher.update(msg.sub, 'utf8', 'hex') + cipher.final('hex');\n    msg.sub = encrypted;\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1dc8e5a1237fe665",
        "type": "function",
        "z": "c2f437acbbab02bd",
        "name": "crypto-dencrypt",
        "func": "try {\n    let algorithm = 'aes256';\n    let key = env.get('CRYPTO_KEY');\n    let iv = env.get('CRYPTO_IV');\n    let decipher = crypto.createDecipheriv(algorithm, key, iv);\n    let decrypted = decipher.update(msg.sub, 'hex', 'utf8') + decipher.final('utf8');\n    msg.sub = decrypted;\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "83a00b6f98e03567",
        "type": "function",
        "z": "f804f4dc33b60992",
        "name": "mapping sub result",
        "func": "try {\n    let { root, pointer, crit } = msg.sub;\n    let { value } = msg.payload[0];\n    let obj = value.data;\n\n    let rootObj = findNestedObj(obj, 'id', root);\n    let pointerObj = (rootObj) ? findNestedObj(rootObj, 'id', pointer) : undefined;\n    let rootFlat = (rootObj) ? flatten([rootObj]) : [];\n    let pointerFlat = (pointerObj) ? flatten([pointerObj]) : [];\n    let parents = getParents(rootFlat, pointer);\n    let result = filterFlat(pointerFlat, crit);\n    msg.sub = {\n        result,\n        parents,\n        flatten: pointerFlat\n    }\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\n\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj;\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return foundObj;\n}\n\nfunction flatten(arr, level = 0, filter = {}, parentId = null) {\n    const filterKeys = Object.keys(filter);\n    return arr.reduce((acc, { id, children, ...rest }) => {\n        const flattenedChildren = children ? flatten(children, level + 1, filter, id) : [];\n        const flattenedObject = { ...rest, id, level, parentId };\n        if (filterKeys.every(key => flattenedObject[key] === filter[key])) {\n            return [...acc, flattenedObject, ...flattenedChildren];\n        }\n        return acc.concat(flattenedChildren);\n    }, []);\n}\n\nfunction filterFlat(flatObj, crit) {\n    return flatObj.filter(x => {\n        let params = [];\n        crit.forEach(c => {\n            let rs = false;\n            if (Array.isArray(c.val)) {\n                rs = c.val.some(s => x[c.key] === s)\n            } else {\n                rs = x[c.key] === c.val\n            }\n            params.push(rs);\n        });\n        return params.reduce((acc, val) => acc && val, true);\n    });\n}\n\nfunction getParents(flatObj, childId) {\n    let parents = [];\n    let child = flatObj.find(x => x.id === childId);\n    if(child){\n        parents.push(child);\n        do {\n            let parent = (child) ? flatObj.find(x => x.id === child.parentId) : [];\n            parents.push(parent);\n            child = parent;\n        }\n        while (child && child.parentId != null);\n    }\n    return parents;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5acd4c3122e3cf4d",
        "type": "cloudantplus in",
        "z": "f804f4dc33b60992",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "83a00b6f98e03567"
            ]
        ]
    },
    {
        "id": "bfe21c560c82d092",
        "type": "function",
        "z": "f804f4dc33b60992",
        "name": "prepare key",
        "func": "msg.payload = {\n    key: ['hierarchy', 'area']\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "5acd4c3122e3cf4d"
            ]
        ]
    },
    {
        "id": "f6e36d93f7d62631",
        "type": "function",
        "z": "44e549ae5408d3d3",
        "name": "find",
        "func": "try {\n    let { obj, key, val } = msg.sub;\n    let nest = findNestedObj(obj, key, val);\n    msg.sub = nest;\n} catch (error) {\n    msg.sub = null;\n    msg.error = error.message;\n}\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj;\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return foundObj;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5ed00e5c9996b0ba",
        "type": "function",
        "z": "63baa18a398cf25b",
        "name": "mapping sub result",
        "func": "try {\n    let { obj, key, scopes } = msg.sub;\n    let rs = [];\n    let combineObj = [];\n    let keyToFind = (key) ? key : 'id';\n    if (Array.isArray(scopes)) {\n        scopes.forEach(value => {\n            let items = findNestedObj(obj, keyToFind, value);\n            let flat = flatten(items);\n            let fullFLat = flatten(obj);\n            let parents = getParents(fullFLat, keyToFind, value);\n            flat[0].parentId = parents[0].parentId;\n            parents.shift();\n            rs.push(parents.sort().reverse().concat(flat));\n        });\n    }\n    combineObj = combineArrays(...rs);\n    msg.sub = combineObj;\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: '',\n        error: error.message\n    }\n}\nreturn msg;\n\nfunction findNestedObj(entireObj, keyToFind, valToFind) {\n    let foundObj = [];\n    JSON.stringify(entireObj, (_, nestedValue) => {\n        if (nestedValue && nestedValue[keyToFind] === valToFind) {\n            foundObj = nestedValue;\n        }\n        return nestedValue;\n    });\n    return [foundObj];\n}\n\nfunction flatten(arr, level = 0, filter = {}, parentId = null) {\n    const filterKeys = Object.keys(filter);\n    return arr.reduce((acc, { id, children, ...rest }) => {\n        const flattenedChildren = children ? flatten(children, level + 1, filter, id) : [];\n        const flattenedObject = { ...rest, id, level, parentId };\n        if (filterKeys.every(key => flattenedObject[key] === filter[key])) {\n            return [...acc, flattenedObject, ...flattenedChildren];\n        }\n        return acc.concat(flattenedChildren);\n    }, []);\n}\n\nfunction getParents(flatObj, keyToFind, childId) {\n    let parents = [];\n    let child = flatObj.find(x => x[keyToFind] === childId);\n    if (child) {\n        parents.push(child);\n        do {\n            let parent = (child) ? flatObj.find(x => x.id === child.parentId) : [];\n            if (parent) parents.push(parent);\n            child = parent;\n        }\n        while (child && child.parentId != null);\n    }\n    return parents;\n}\n\nfunction combineArrays(...arrays) {\n    const combinedArray = [].concat(...arrays);\n    const uniqueObject = {};\n    const uniqueArray = [];\n\n    for (let obj of combinedArray) {\n        const objString = JSON.stringify(obj);\n        if (!uniqueObject[objString]) {\n            uniqueObject[objString] = true;\n            uniqueArray.push(obj);\n        }\n    }\n\n    return uniqueArray;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a913be707788b4a3",
        "type": "subflow:63baa18a398cf25b",
        "z": "25a729f30c43b341",
        "name": "",
        "x": 1070,
        "y": 140,
        "wires": [
            [
                "d6d816aa7d1fd15a"
            ]
        ]
    },
    {
        "id": "e3217c7e3ff0b0fd",
        "type": "cloudantplus in",
        "z": "25a729f30c43b341",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 760,
        "y": 180,
        "wires": [
            [
                "06ba7a2d683fd8ee"
            ]
        ]
    },
    {
        "id": "7f0d668f43a58f56",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get scope by code",
        "func": "msg.backup = msg.payload;\nmsg.ori = msg.sub;\nmsg.payload = `scope:${msg.sub}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "21f9205ec0644936"
            ]
        ]
    },
    {
        "id": "06ba7a2d683fd8ee",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "prepare sub",
        "func": "msg.sub = {\n    obj: msg.payload[0].data,\n    scopes: msg.scope.data\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            [
                "a913be707788b4a3"
            ]
        ]
    },
    {
        "id": "915a77b65f7aa5ff",
        "type": "cloudantplus in",
        "z": "25a729f30c43b341",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 480,
        "y": 180,
        "wires": [
            [
                "6c434f53bb47186d"
            ]
        ]
    },
    {
        "id": "cafade7146ea2c39",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get area hierarchy",
        "func": "msg.scope = msg.payload[0];\nmsg.payload = {\n    key: msg.scope.hierarchyCode\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            [
                "e3217c7e3ff0b0fd"
            ]
        ]
    },
    {
        "id": "21f9205ec0644936",
        "type": "redis-command",
        "z": "25a729f30c43b341",
        "server": "0fb96b870afb5c15",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "f240a561dacceaa9"
            ]
        ]
    },
    {
        "id": "f240a561dacceaa9",
        "type": "switch",
        "z": "25a729f30c43b341",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "534e74173a3dea50"
            ],
            [
                "0a60a67d15c726a8"
            ]
        ]
    },
    {
        "id": "534e74173a3dea50",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "get scope by code",
        "func": "msg.payload = {\n    key: msg.ori\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "915a77b65f7aa5ff"
            ]
        ]
    },
    {
        "id": "0a60a67d15c726a8",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "return from redis",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f8bd74c6b30d97c4",
        "type": "redis-command",
        "z": "25a729f30c43b341",
        "server": "0fb96b870afb5c15",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d6d816aa7d1fd15a",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "save to redis",
        "func": "/**to set expire set topic into null\n * and set payload to an Array with EX on it [topic, value, EX, ex-value]\n */\nmsg.payload = [`scope:${msg.ori}`, JSON.stringify(msg.sub), 'EX', Number(env.get('NODERED_TTL')) * 60];\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "d23e487ead152956",
                "d643abded042cc41"
            ]
        ]
    },
    {
        "id": "d23e487ead152956",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "return scopes",
        "func": "msg.payload = msg.backup;\ndelete msg.scope;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6c434f53bb47186d",
        "type": "switch",
        "z": "25a729f30c43b341",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 220,
        "wires": [
            [
                "cafade7146ea2c39"
            ],
            [
                "b1937dbaaed86b43"
            ]
        ]
    },
    {
        "id": "b1937dbaaed86b43",
        "type": "function",
        "z": "25a729f30c43b341",
        "name": "return empty",
        "func": "msg.sub = null;\nmsg.payload = msg.backup;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d643abded042cc41",
        "type": "switch",
        "z": "25a729f30c43b341",
        "name": "",
        "property": "sub",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 180,
        "wires": [
            [
                "f8bd74c6b30d97c4"
            ]
        ]
    },
    {
        "id": "0a73e980ab04f0d2",
        "type": "function",
        "z": "dbbf76b23c84dc6a",
        "name": "check sub payload",
        "func": "msg.backup02 = msg.payload;\nlet valid = false;\nlet useCombo = false;\nif (msg.sub) {\n    useCombo = msg.sub.useCombo;\n    msg.payload = {\n        key: (useCombo) ? msg.sub.combo : msg.sub.sitemapCode\n    }\n    valid = true;\n}\nmsg.useCombo = useCombo;\nmsg.isValid = valid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "08bcb48c676df886"
            ]
        ]
    },
    {
        "id": "08bcb48c676df886",
        "type": "switch",
        "z": "dbbf76b23c84dc6a",
        "name": "isValid",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "4dbabe3ecdd13759"
            ],
            [
                "1442ce309155c0cb"
            ]
        ]
    },
    {
        "id": "4dbabe3ecdd13759",
        "type": "switch",
        "z": "dbbf76b23c84dc6a",
        "name": "useCombo",
        "property": "useCombo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "c8f180872d2a8968"
            ],
            [
                "02b378dce9bccf4a"
            ]
        ]
    },
    {
        "id": "1442ce309155c0cb",
        "type": "change",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sub",
                "pt": "msg",
                "to": "null",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c8f180872d2a8968",
        "type": "cloudantplus in",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "02b378dce9bccf4a"
            ]
        ]
    },
    {
        "id": "02b378dce9bccf4a",
        "type": "function",
        "z": "dbbf76b23c84dc6a",
        "name": "prepare scopes",
        "func": "try {\n    let scopes = { ...msg.sub };\n    if (msg.useCombo) {\n        let { sitemapCode, organizationCode } = msg.payload[0].data\n        scopes['sitemapCode'] = sitemapCode;\n        scopes['organizationCode'] = organizationCode;\n    }\n\n    msg.scopes = Object.keys(scopes).map((key) => {\n        let topic = null;\n        switch (key) {\n            case 'areaCode':\n                topic = 'area';\n                break;\n            case 'sitemapCode':\n                topic = 'sitemap';\n                break;\n            case 'organizationCode':\n                topic = 'organization'\n                break;\n        }\n        if (topic) {\n            return {\n                type: topic,\n                code: scopes[key]\n            }\n        }\n    }).filter(x => {\n        if (x) return x;\n    });\n    msg.payload = msg.scopes;\n} catch (error) {\n    msg.sub = null;\n    msg.error = {\n        hint: 'combo not found',\n        error: error.message\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "ff3e5c5f37383acb"
            ]
        ]
    },
    {
        "id": "07d3733446a87fc2",
        "type": "split",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 160,
        "wires": [
            [
                "7c14c0819a34ff22"
            ]
        ]
    },
    {
        "id": "9dc929318448b3ec",
        "type": "join",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 200,
        "wires": [
            [
                "5646d036e73912b8"
            ]
        ]
    },
    {
        "id": "67a10894c30a68e6",
        "type": "function",
        "z": "dbbf76b23c84dc6a",
        "name": "embed doc",
        "func": "let scope = { ...msg.payload }\nscope['scopes'] = msg.sub;\nmsg.payload = scope;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 160,
        "wires": [
            [
                "9dc929318448b3ec"
            ]
        ]
    },
    {
        "id": "7c14c0819a34ff22",
        "type": "change",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sub",
                "pt": "msg",
                "to": "payload.code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 200,
        "wires": [
            [
                "28f09b396f5a23ee"
            ]
        ]
    },
    {
        "id": "28f09b396f5a23ee",
        "type": "subflow:25a729f30c43b341",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "67a10894c30a68e6"
            ]
        ]
    },
    {
        "id": "5646d036e73912b8",
        "type": "function",
        "z": "dbbf76b23c84dc6a",
        "name": "return and clean up",
        "func": "msg.sub = msg.payload;\nmsg.payload = msg.backup02;\n\ndelete msg.scopes;\ndelete msg.backup;\ndelete msg.backup02;\ndelete msg.isValid;\ndelete msg.useCombo;\ndelete msg.cloudant;\ndelete msg.ori;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ff3e5c5f37383acb",
        "type": "switch",
        "z": "dbbf76b23c84dc6a",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 200,
        "wires": [
            [
                "07d3733446a87fc2"
            ],
            []
        ]
    },
    {
        "id": "96a4afc30c20b571",
        "type": "cloudantplus in",
        "z": "9e1a5ed360837111",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-blueprint",
        "service": "_ext_",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "bc03ea4c02e4f058",
                "815ad5d520f95317"
            ]
        ]
    },
    {
        "id": "bc03ea4c02e4f058",
        "type": "function",
        "z": "9e1a5ed360837111",
        "name": "result",
        "func": "try {\n    if(msg.payload){\n        msg.sub = msg.payload.data;\n    }else{\n        msg.sub = null;\n    }\n} catch (error) {\n    msg.sub = null;\n    msg.error = error.message;\n}\nmsg.payload = msg.backup;\ndelete msg.backup;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b4e15d4c0180190f",
        "type": "redis-command",
        "z": "9e1a5ed360837111",
        "server": "0fb96b870afb5c15",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 900,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c61741a6131b4649",
        "type": "function",
        "z": "9e1a5ed360837111",
        "name": "prepare payload",
        "func": "msg.payload = [`page:${msg.payload._id}`, JSON.stringify(msg.payload.data), 'EX', Number(env.get('NODERED_TTL')) * 60];\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 120,
        "wires": [
            [
                "b4e15d4c0180190f"
            ]
        ]
    },
    {
        "id": "de59eeb7a3e9990b",
        "type": "function",
        "z": "9e1a5ed360837111",
        "name": "set key",
        "func": "msg.backup = msg.payload;\nmsg.payload = `page:${msg.sub}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "fd52843d369dca35"
            ]
        ]
    },
    {
        "id": "fd52843d369dca35",
        "type": "redis-command",
        "z": "9e1a5ed360837111",
        "server": "0fb96b870afb5c15",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 180,
        "y": 160,
        "wires": [
            [
                "a6d128ad3b00e4a2"
            ]
        ]
    },
    {
        "id": "a6d128ad3b00e4a2",
        "type": "switch",
        "z": "9e1a5ed360837111",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 160,
        "wires": [
            [
                "b5c71771edac53a8"
            ],
            [
                "e2804e8e36bdb441"
            ]
        ]
    },
    {
        "id": "b5c71771edac53a8",
        "type": "function",
        "z": "9e1a5ed360837111",
        "name": "set key",
        "func": "msg.payload = msg.sub;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            [
                "96a4afc30c20b571"
            ]
        ]
    },
    {
        "id": "e2804e8e36bdb441",
        "type": "function",
        "z": "9e1a5ed360837111",
        "name": "JSON parse",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "815ad5d520f95317",
        "type": "switch",
        "z": "9e1a5ed360837111",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 120,
        "wires": [
            [
                "c61741a6131b4649"
            ]
        ]
    },
    {
        "id": "fccbeff34d3395f5",
        "type": "http request",
        "z": "34c9e2e17c31980a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "dfba6fa7f724fa1e"
            ]
        ]
    },
    {
        "id": "60a76718d2bdac31",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "mapping data & set filter by props",
        "func": "let payload = JSON.parse(msg.payload);\nlet docs;\nlet keys;\nmsg.type = msg.sub.scopeType;\nswitch (msg.sub.scopeType) {\n    case 'psm':\n        docs = payload.data.geojson.features.map(x => {\n            return {\n                psm: x.properties.psm,\n                pt: x.properties.pt,\n                type: x.type,\n                properties: x.properties,\n                geometry: x.geometry\n            }\n        });\n        keys = payload.data.geojson.features.map(x => {\n            return [\n                x.properties.psm,\n                x.properties.pt\n            ];\n        });\n        break;\n    case 'estate':\n        docs = payload.data.geojson.features.map(x => {\n            return {\n                psm: x.properties.psm,\n                pt: x.properties.pt,\n                estate: x.properties.estate,\n                type: x.type,\n                properties: x.properties,\n                geometry: x.geometry\n            }\n        });\n        keys = payload.data.geojson.features.map(x => {\n            return [\n                x.properties.psm,\n                x.properties.pt,\n                x.properties.estate,\n            ];\n        });\n        break;\n    case 'division':\n        docs = payload.data.geojson.features.map(x => {\n            return {\n                psm: x.properties.psm,\n                pt: x.properties.pt,\n                estate: x.properties.estate,\n                division: x.properties.divisi,\n                type: x.type,\n                properties: x.properties,\n                geometry: x.geometry\n            }\n        });\n        keys = payload.data.geojson.features.map(x => {\n            return [\n                x.properties.psm,\n                x.properties.pt,\n                x.properties.estate,\n                x.properties.divisi,\n            ];\n        });\n        break;\n    case 'block':\n        docs = payload.data.geojson.features.map(x => {\n            return {\n                psm: x.properties.psm,\n                pt: x.properties.pt,\n                estate: x.properties.estate,\n                division: x.properties.divisi,\n                block: x.properties.blok,\n                type: x.type,\n                properties: x.properties,\n                geometry: x.geometry\n            }\n        });\n        keys = payload.data.geojson.features.map(x => {\n            return [\n                x.properties.psm,\n                x.properties.pt,\n                x.properties.estate,\n                x.properties.divisi,\n                x.properties.blok,\n            ];\n        });\n        break;\n    case 'road':\n        docs = payload.data.geojson.features.map(x => {\n            return {\n                psm: x.properties.psm,\n                pt: x.properties.pt,\n                estate: x.properties.estate_code,\n                division: x.properties.divisi,\n                roadID: x.properties.id_jalan,\n                roadType: x.properties.kls_jalan,\n                type: x.type,\n                properties: x.properties,\n                geometry: x.geometry\n            }\n        });\n        keys = payload.data.geojson.features.map(x => {\n            return [\n                x.properties.psm,\n                x.properties.pt,\n                x.properties.estate_code,\n                x.properties.divisi,\n                x.properties.id_jalan\n            ];\n        });\n        break;\n}\nmsg.payload = {\n    keys: keys\n}\nmsg.documents = {\n    docs: docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            [
                "f9e7986a48730a02"
            ]
        ]
    },
    {
        "id": "b47d8660c8311e88",
        "type": "switch",
        "z": "34c9e2e17c31980a",
        "name": "status code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 300,
        "wires": [
            [
                "60a76718d2bdac31"
            ],
            [
                "6a73d09096734f5f"
            ],
            [
                "d1423efaabe013b3"
            ]
        ]
    },
    {
        "id": "860c452556bcc207",
        "type": "http request",
        "z": "34c9e2e17c31980a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-geojson/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 260,
        "wires": [
            [
                "b5780a4c4612bc87"
            ]
        ]
    },
    {
        "id": "942cd95c71f1be05",
        "type": "cloudantplus in",
        "z": "34c9e2e17c31980a",
        "name": "filter/division",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "division",
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "07d33039ce8d5767"
            ]
        ]
    },
    {
        "id": "07d33039ce8d5767",
        "type": "switch",
        "z": "34c9e2e17c31980a",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "f49780686ccb490b"
            ],
            [
                "886e4d3da455eb94"
            ]
        ]
    },
    {
        "id": "f49780686ccb490b",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "prepare docs id for delete",
        "func": "msg.payload = {\n    docs: msg.payload.map(x => {\n        return { ...x, _deleted: true }\n    })\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "f1adc5badfd32d68"
            ]
        ]
    },
    {
        "id": "f1adc5badfd32d68",
        "type": "http request",
        "z": "34c9e2e17c31980a",
        "name": "bulk delete",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-geojson/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 140,
        "wires": [
            [
                "886e4d3da455eb94"
            ]
        ]
    },
    {
        "id": "886e4d3da455eb94",
        "type": "change",
        "z": "34c9e2e17c31980a",
        "name": "retrieve documents",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "documents",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 220,
        "wires": [
            [
                "860c452556bcc207"
            ]
        ]
    },
    {
        "id": "b2e4fa5bb4ce4106",
        "type": "http request",
        "z": "34c9e2e17c31980a",
        "name": "renew pnmp token",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://digistage.sinarmas-agri.com/api-app-portal-beta/api/pnmp_token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "33b79b1911f801a7"
            ]
        ]
    },
    {
        "id": "33b79b1911f801a7",
        "type": "switch",
        "z": "34c9e2e17c31980a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "6dfd2d0d5832ee58"
            ],
            [
                "cf22c742149e5e52"
            ]
        ]
    },
    {
        "id": "6dfd2d0d5832ee58",
        "type": "change",
        "z": "34c9e2e17c31980a",
        "name": "set renewToken",
        "rules": [
            {
                "t": "set",
                "p": "renewToken",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 340,
        "wires": [
            [
                "fccbeff34d3395f5"
            ]
        ]
    },
    {
        "id": "6a73d09096734f5f",
        "type": "switch",
        "z": "34c9e2e17c31980a",
        "name": "if attempt = 0",
        "property": "renewToken",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 300,
        "wires": [
            [
                "b2e4fa5bb4ce4106"
            ]
        ]
    },
    {
        "id": "49913bb8653ecfe9",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "read sub payload",
        "func": "/**backup payload */\nmsg.backup = msg.payload;\n\nlet { scopeType, ref1, ref2, ref3 } = msg.sub;\nlet url = `https://digistage.sinarmas-agri.com/api-app-portal-beta/api/pnmp_basemap?scope_type=${scopeType}&ref1=${ref1}`;\nif (ref2) {\n    url += `&ref2=${ref2}`;\n    if (ref3) url += `&ref3=${ref3}`;\n}\nmsg.url = url;\nmsg.renewToken = false;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "fccbeff34d3395f5"
            ]
        ]
    },
    {
        "id": "dfba6fa7f724fa1e",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "function 42",
        "func": "delete msg.url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            [
                "b47d8660c8311e88"
            ]
        ]
    },
    {
        "id": "b5780a4c4612bc87",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "result",
        "func": "if (msg.tokenFailed) {\n    msg.sub = {\n        error: 'failed to renew PNMP token'\n    }\n    delete msg.tokenFailed;\n} else if (msg.pnmpFailed) {\n    msg.sub = {\n        error: msg.error\n    }\n    delete msg.pnmpFailed;\n    delete msg.error;\n}\nelse if (msg.catchError) {\n    msg.sub = msg.payload;\n    delete msg.catchError;\n} else {\n    msg.sub = JSON.parse(msg.payload);\n}\n\n/**restore payload */\nmsg.payload = msg.backup;\ndelete msg.backup;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "cf22c742149e5e52",
        "type": "change",
        "z": "34c9e2e17c31980a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tokenFailed",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 400,
        "wires": [
            [
                "b5780a4c4612bc87"
            ]
        ]
    },
    {
        "id": "f9e7986a48730a02",
        "type": "switch",
        "z": "34c9e2e17c31980a",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "psm",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "estate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "division",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "block",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "road",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 870,
        "y": 140,
        "wires": [
            [
                "f359b622fc0e21bd"
            ],
            [
                "67a0948dd3d44270"
            ],
            [
                "942cd95c71f1be05"
            ],
            [
                "2dba73f536e884a9"
            ],
            [
                "a1fb6cd1c6ef04df"
            ]
        ]
    },
    {
        "id": "2dba73f536e884a9",
        "type": "cloudantplus in",
        "z": "34c9e2e17c31980a",
        "name": "filter/block",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "block",
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "07d33039ce8d5767"
            ]
        ]
    },
    {
        "id": "a1fb6cd1c6ef04df",
        "type": "cloudantplus in",
        "z": "34c9e2e17c31980a",
        "name": "filter/road",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "road",
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "07d33039ce8d5767"
            ]
        ]
    },
    {
        "id": "67a0948dd3d44270",
        "type": "cloudantplus in",
        "z": "34c9e2e17c31980a",
        "name": "filter/estate",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "estate",
        "x": 1090,
        "y": 100,
        "wires": [
            [
                "07d33039ce8d5767"
            ]
        ]
    },
    {
        "id": "f359b622fc0e21bd",
        "type": "cloudantplus in",
        "z": "34c9e2e17c31980a",
        "name": "filter/psm",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "psm",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "07d33039ce8d5767"
            ]
        ]
    },
    {
        "id": "d1423efaabe013b3",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "pnmp failed",
        "func": "msg.pnmpFailed = true;\nmsg.error = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 420,
        "wires": [
            [
                "b5780a4c4612bc87"
            ]
        ]
    },
    {
        "id": "c072017d36c2b92e",
        "type": "catch",
        "z": "34c9e2e17c31980a",
        "name": "",
        "scope": [
            "fccbeff34d3395f5"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "1a06d66728456bcb"
            ]
        ]
    },
    {
        "id": "1a06d66728456bcb",
        "type": "function",
        "z": "34c9e2e17c31980a",
        "name": "function 50",
        "func": "msg.catchError = true;\nmsg.payload = msg.error;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "b5780a4c4612bc87"
            ]
        ]
    },
    {
        "id": "09ce6f4f9faad7e1",
        "type": "function",
        "z": "d7ccf53b2b9fe097",
        "name": "read sub",
        "func": "msg.backup = msg.payload;\n\nlet { database, design, view, key } = msg.sub;\nlet keyStr = (Array.isArray(key)) ? `[${key.map(x => `\"${x}\"`).join(',')}]` : `\"${key}\"`;\nmsg.url = `${env.get('DOCKER_COUCHDB_DOMAIN')}/${database}/_design/${design}/_view/${view}?key=${keyStr}`;\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCKER_COUCHDB_USER')}:${env.get('DOCKER_COUCHDB_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "fa9c1abe42043f29"
            ]
        ]
    },
    {
        "id": "fa9c1abe42043f29",
        "type": "http request",
        "z": "d7ccf53b2b9fe097",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "7af2625f0ad3a7a3"
            ]
        ]
    },
    {
        "id": "7af2625f0ad3a7a3",
        "type": "function",
        "z": "d7ccf53b2b9fe097",
        "name": "result",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\ndelete msg.url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4294ab4b0f30fa4d",
        "type": "redis-command",
        "z": "183547d77875ed65",
        "server": "0fb96b870afb5c15",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "78ee1c8ee02c336c"
            ]
        ]
    },
    {
        "id": "6ef494b5ccc166ea",
        "type": "function",
        "z": "183547d77875ed65",
        "name": "read sub & prepare",
        "func": "msg.backup = msg.payload;\nlet { key, payload, ttl } = msg.sub;\nmsg.payload = [key, payload, 'EX', ttl];\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "4294ab4b0f30fa4d"
            ]
        ]
    },
    {
        "id": "78ee1c8ee02c336c",
        "type": "debug",
        "z": "183547d77875ed65",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 160,
        "wires": []
    },
    {
        "id": "c732a3d57c8f41e1",
        "type": "http request",
        "z": "f0ae825b26a06b48",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-tracking/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "45ba03c6a9768c57"
            ]
        ]
    },
    {
        "id": "8cc48b7d698dead4",
        "type": "function",
        "z": "f0ae825b26a06b48",
        "name": "read sub",
        "func": "msg.backup = msg.payload;\n\nlet { database, docs } = msg.sub;\nmsg.payload = {\n    docs: docs\n};\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.url = `http://localhost:5930/${database}/_bulk_docs`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "c732a3d57c8f41e1"
            ]
        ]
    },
    {
        "id": "45ba03c6a9768c57",
        "type": "function",
        "z": "f0ae825b26a06b48",
        "name": "result",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\ndelete msg.url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2620133002dbd2f4",
        "type": "redis-command",
        "z": "7075118feab4d811",
        "server": "0fb96b870afb5c15",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 200,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3183d03b99f891d5",
        "type": "function",
        "z": "2cfd802f51415515",
        "name": "prepare sub",
        "func": "let { geoType, groupBy, key } = msg.ori;\nlet pKey;\nlet psm = (key[0]) ? key[0] : null;\nlet estate = (key[0]) ? key[1] : null;\nlet division = (key[0]) ? key[2] : null;\n\nswitch (groupBy) {\n    case 'psm':\n        pKey = psm;\n        break;\n    case 'estate':\n        pKey = [psm, estate];\n        break;\n    case 'division':\n        pKey = [psm, estate, division];\n        break;\n    default:\n        pKey = key;\n        break;\n}\nmsg.sub = {\n    database: 'smart-geojson',\n    design: geoType,\n    view: (groupBy != null) ? `geo-by-${groupBy}` : 'geometry',\n    key: pKey\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "880b6c24e2472c35"
            ]
        ]
    },
    {
        "id": "880b6c24e2472c35",
        "type": "subflow:d7ccf53b2b9fe097",
        "z": "2cfd802f51415515",
        "name": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "45fa618254c2782e"
            ]
        ]
    },
    {
        "id": "45fa618254c2782e",
        "type": "function",
        "z": "2cfd802f51415515",
        "name": "check sub",
        "func": "let found = false;\nlet error = (msg.sub.error) ? true : false;\nif (!msg.sub.error && msg.sub.rows.length > 0) found = true;\n\nmsg.found = found;\nmsg.error = error;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "81d4d62cd1c8e791",
        "type": "http request",
        "z": "188768fc5fe509fd",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "74fc87c448219683"
            ]
        ]
    },
    {
        "id": "bb765dc76a562151",
        "type": "function",
        "z": "188768fc5fe509fd",
        "name": "read sub payload",
        "func": "/**backup payload */\nmsg.backup = msg.payload;\n\nlet { scopeType, ref1, ref2, ref3 } = msg.sub;\nlet url = `${env.get('PNMP_API_URL')}/pnmp_basemap?scope_type=${scopeType}&ref1=${ref1}`;\nif (ref2) {\n    url += `&ref2=${ref2}`;\n    if (ref3) url += `&ref3=${ref3}`;\n}\nmsg.url = url;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "81d4d62cd1c8e791"
            ]
        ]
    },
    {
        "id": "a7ca5ffbce7ac4a7",
        "type": "function",
        "z": "188768fc5fe509fd",
        "name": "parse payload",
        "func": "msg.sub = JSON.parse(msg.payload);\nmsg.payload = msg.backup;\ndelete msg.backup;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f4842fd4e028e2af",
        "type": "function",
        "z": "188768fc5fe509fd",
        "name": "EAI_AGAIN",
        "func": "msg.sub = {\n    error: msg.payload\n};\nmsg.payload = msg.backup;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "74fc87c448219683",
        "type": "switch",
        "z": "188768fc5fe509fd",
        "name": "error?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "EAI_AGAIN",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "a7ca5ffbce7ac4a7"
            ],
            [
                "f4842fd4e028e2af"
            ]
        ]
    },
    {
        "id": "074505bef39bc7ec",
        "type": "http request",
        "z": "3c790259a2397aef",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-geojson/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "983841bc2a8d699f"
            ]
        ]
    },
    {
        "id": "218a739b30e6520f",
        "type": "cloudantplus in",
        "z": "3c790259a2397aef",
        "name": "filter/division",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "division",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "b7023ff3abe0b03f"
            ]
        ]
    },
    {
        "id": "b7023ff3abe0b03f",
        "type": "function",
        "z": "3c790259a2397aef",
        "name": "prepare docs id for delete",
        "func": "msg.payload = {\n    docs: msg.payload.map(x => {\n        return { ...x, _deleted: true }\n    })\n}; \nmsg.url = `${env.get('DOCKER_COUCHDB_DOMAIN')}/smart-geojson/_bulk_docs`\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCKER_COUCHDB_USER')}:${env.get('DOCKER_COUCHDB_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "8713fa1ac7826c50"
            ]
        ]
    },
    {
        "id": "8713fa1ac7826c50",
        "type": "http request",
        "z": "3c790259a2397aef",
        "name": "bulk delete",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-geojson/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "56e8c7384d076572"
            ]
        ]
    },
    {
        "id": "73ed853ed8ccad3c",
        "type": "switch",
        "z": "3c790259a2397aef",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "psm",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "estate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "division",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "block",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "road",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "366861ce468a7842"
            ],
            [
                "e618929b83c729a0"
            ],
            [
                "218a739b30e6520f"
            ],
            [
                "39fc646bfe061a2b"
            ],
            [
                "9eb43b3be552f09d"
            ]
        ]
    },
    {
        "id": "39fc646bfe061a2b",
        "type": "cloudantplus in",
        "z": "3c790259a2397aef",
        "name": "filter/block",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "block",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "b7023ff3abe0b03f"
            ]
        ]
    },
    {
        "id": "9eb43b3be552f09d",
        "type": "cloudantplus in",
        "z": "3c790259a2397aef",
        "name": "filter/road",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "road",
        "x": 480,
        "y": 240,
        "wires": [
            [
                "b7023ff3abe0b03f"
            ]
        ]
    },
    {
        "id": "e618929b83c729a0",
        "type": "cloudantplus in",
        "z": "3c790259a2397aef",
        "name": "filter/estate",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "estate",
        "x": 490,
        "y": 120,
        "wires": [
            [
                "b7023ff3abe0b03f"
            ]
        ]
    },
    {
        "id": "366861ce468a7842",
        "type": "cloudantplus in",
        "z": "3c790259a2397aef",
        "name": "filter/psm",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_view_",
        "design": "filter",
        "index": "psm",
        "x": 480,
        "y": 80,
        "wires": [
            [
                "b7023ff3abe0b03f"
            ]
        ]
    },
    {
        "id": "124d7410ca5363a8",
        "type": "function",
        "z": "3c790259a2397aef",
        "name": "extract keys & docs",
        "func": "msg.payload = msg.backup;\nlet { type, keys, docs } = msg.sub;\nmsg.payload = {\n    keys: keys\n}\nmsg.documents = {\n    docs: docs\n}\nmsg.type = type;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "73ed853ed8ccad3c"
            ]
        ]
    },
    {
        "id": "983841bc2a8d699f",
        "type": "function",
        "z": "3c790259a2397aef",
        "name": "result",
        "func": "msg.sub = msg.payload;\nmsg.payload = msg.backup;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "56e8c7384d076572",
        "type": "function",
        "z": "3c790259a2397aef",
        "name": "prepare docs to insert",
        "func": "msg.payload = msg.documents;\nmsg.url = `${env.get('DOCKER_COUCHDB_DOMAIN')}/smart-geojson/_bulk_docs`\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCKER_COUCHDB_USER')}:${env.get('DOCKER_COUCHDB_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "074505bef39bc7ec"
            ]
        ]
    },
    {
        "id": "07090842a5b11d57",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-configs",
        "service": "_ext_",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 680,
        "y": 100,
        "wires": [
            [
                "f146b2e3f30c2aa6"
            ]
        ]
    },
    {
        "id": "4b306d7cfa8e7656",
        "type": "change",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "smart-apps",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 60,
        "wires": [
            [
                "07090842a5b11d57"
            ]
        ]
    },
    {
        "id": "f146b2e3f30c2aa6",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "check apps",
        "func": "let id = msg.req.params.id;\nmsg.found = msg.payload.data.some(x => x.code === id);\nif(msg.found){\n    msg.result = msg.payload.data.find(x => x.code === id);\n    msg.payload = {\n        key: [\"schema\", \"page\"]\n    }\n}else{\n    msg.payload = \"not found\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 140,
        "wires": [
            [
                "db6e97c260d1ad13"
            ]
        ]
    },
    {
        "id": "db6e97c260d1ad13",
        "type": "switch",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "property": "found",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "23aca37ca7c75333"
            ],
            [
                "5c0bb31de63a7815"
            ]
        ]
    },
    {
        "id": "5c0bb31de63a7815",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 920,
        "y": 240,
        "wires": []
    },
    {
        "id": "5ad004fefd0a0e7a",
        "type": "http in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "url": "/api/apps/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "8645128bc12f8fb7"
            ]
        ]
    },
    {
        "id": "8645128bc12f8fb7",
        "type": "switch",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "property": "req.params.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "4b306d7cfa8e7656"
            ],
            [
                "ab1667e945489ac4"
            ]
        ]
    },
    {
        "id": "a11a2132155a3611",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 920,
        "y": 280,
        "wires": []
    },
    {
        "id": "ab1667e945489ac4",
        "type": "change",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "bad parameters",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 280,
        "wires": [
            [
                "a11a2132155a3611"
            ]
        ]
    },
    {
        "id": "23aca37ca7c75333",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-blueprint",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "type-topic",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "30e7957e06e98573"
            ]
        ]
    },
    {
        "id": "30e7957e06e98573",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "function 1",
        "func": "msg.result['pages'] = msg.payload;\nmsg.payload = {\n    key : msg.req.params.id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 100,
        "wires": [
            [
                "8601b3ec70802672"
            ]
        ]
    },
    {
        "id": "cd0e89b2981e6227",
        "type": "http response",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1100,
        "y": 180,
        "wires": []
    },
    {
        "id": "8601b3ec70802672",
        "type": "cloudantplus in",
        "z": "68f1d2b77bbdcda6",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "navigation",
        "index": "all-navs",
        "x": 920,
        "y": 140,
        "wires": [
            [
                "bec2818cfb56c788"
            ]
        ]
    },
    {
        "id": "bec2818cfb56c788",
        "type": "function",
        "z": "68f1d2b77bbdcda6",
        "name": "function 2",
        "func": "let id = msg.req.params.id;\nmsg.result['navigation'] = msg.payload.find(x => x.applicationID === id);\nmsg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "cd0e89b2981e6227"
            ]
        ]
    },
    {
        "id": "cc2ca5ee337e0870",
        "type": "http in",
        "z": "10a453599cf0bfe0",
        "name": "",
        "url": "/api/forms/road-condition",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "640e8c66f45f9c26",
                "740317eedd570707"
            ]
        ]
    },
    {
        "id": "740317eedd570707",
        "type": "http response",
        "z": "10a453599cf0bfe0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "640e8c66f45f9c26",
        "type": "debug",
        "z": "10a453599cf0bfe0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "2a4feb8a87d0a7c4",
        "type": "http in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "url": "/api/auth/sign-in",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "1139aaeb805d591e"
            ]
        ]
    },
    {
        "id": "24dfaa402842999c",
        "type": "cloudantplus in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-users",
        "service": "_ext_",
        "search": "_view_",
        "design": "view-user",
        "index": "by-nik",
        "x": 730,
        "y": 160,
        "wires": [
            [
                "b3f14e2a3a967408"
            ]
        ]
    },
    {
        "id": "1139aaeb805d591e",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "check body",
        "func": "let {nik, password} = msg.payload;\nlet isValid = false;\nif(nik && password){\n    isValid = true;\n    msg.payload = {\n        key: nik\n    }\n}\nmsg.isValid = isValid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "5dbfca463b8f94ea"
            ]
        ]
    },
    {
        "id": "b3f14e2a3a967408",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 200,
        "wires": [
            [
                "f76eb5c7ca814e7f"
            ],
            [
                "f55844213af658cb"
            ]
        ]
    },
    {
        "id": "c9f15de4fba5c2e0",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "f55844213af658cb",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"user-not-found\",\"message\":\"user not found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 260,
        "wires": [
            [
                "c9f15de4fba5c2e0"
            ]
        ]
    },
    {
        "id": "f76eb5c7ca814e7f",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "prepare sub",
        "func": "let user= msg.payload[0];\ndelete user._id;\ndelete user._rev;\nlet pass = user.authorizations.find(x => x.type === 'password').passwords\nmsg.sub = pass[pass.length - 1];\nmsg.user = user\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            [
                "12be102bd5a5549e"
            ]
        ]
    },
    {
        "id": "12be102bd5a5549e",
        "type": "subflow:c2f437acbbab02bd",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 980,
        "y": 160,
        "wires": [
            [
                "54a019b169729c69"
            ]
        ]
    },
    {
        "id": "0460f41c928aef8f",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "check account",
        "func": "let isValid = false;\nlet {nik, password} = msg.req.body;\nif(`${nik};${password}` === msg.sub){\n    isValid = true;\n    msg.sub = msg.user\n}\nmsg.isValid = isValid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 160,
        "wires": [
            [
                "5ef56066432171ba"
            ]
        ]
    },
    {
        "id": "ab91fa5df5761e58",
        "type": "subflow:77002254b872fa8e",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 1450,
        "y": 160,
        "wires": [
            [
                "b2e40b5de9099cf4"
            ]
        ]
    },
    {
        "id": "5ef56066432171ba",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 200,
        "wires": [
            [
                "ab91fa5df5761e58"
            ],
            [
                "982ba459a96640b9"
            ]
        ]
    },
    {
        "id": "11fc9ef3ad64cf3c",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1440,
        "y": 300,
        "wires": []
    },
    {
        "id": "982ba459a96640b9",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"not-authorized\",\"message\":\"account not authorized\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 260,
        "wires": [
            [
                "11fc9ef3ad64cf3c"
            ]
        ]
    },
    {
        "id": "5dbfca463b8f94ea",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 200,
        "wires": [
            [
                "24dfaa402842999c"
            ],
            [
                "1b09477332150a88"
            ]
        ]
    },
    {
        "id": "96353977042ba7f3",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "1b09477332150a88",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"code\":400,\"error\":\"invalid-parameter\",\"message\":\"check your parameters\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 260,
        "wires": [
            [
                "96353977042ba7f3"
            ]
        ]
    },
    {
        "id": "946615b5dff60503",
        "type": "cloudantplus in",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 1680,
        "y": 200,
        "wires": [
            [
                "17cf590e3d949f01"
            ]
        ]
    },
    {
        "id": "17cf590e3d949f01",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "prepare sub",
        "func": "msg.sub = {\n    obj: msg.payload[0].data,\n    key: 'code',\n    val: (msg.user.systemRoles && msg.user.systemRoles.length > 0) ? msg.user.systemRoles[0] : null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 200,
        "wires": [
            [
                "33feea6c9732727e"
            ]
        ]
    },
    {
        "id": "20f7357695b26aa8",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "set result",
        "func": "msg.user.token = msg.sub;\ndelete msg.sub;\nmsg.payload = {\n    key: [\"reference\", \"smart-system-role\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 160,
        "wires": [
            [
                "946615b5dff60503"
            ]
        ]
    },
    {
        "id": "33feea6c9732727e",
        "type": "subflow:44e549ae5408d3d3",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "x": 1930,
        "y": 240,
        "wires": [
            [
                "98a0c35f4d38f37f"
            ]
        ]
    },
    {
        "id": "3b111b6afac1790d",
        "type": "function",
        "z": "3a3a41a0d95d74c4",
        "name": "set system roles",
        "func": "try {\n    let user = { ...msg.user };\n    user.systemRoles[0] = msg.sub;\n    delete user.authorizations;\n    msg.statusCode = 200;\n    msg.payload = user;\n    delete msg.user;\n} catch (error) {\n    msg.statusCode = 500;\n    msg.payload = { error: \"user don't have systemRoles\" }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 240,
        "wires": [
            [
                "c41d95634343de45"
            ]
        ]
    },
    {
        "id": "c41d95634343de45",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2170,
        "y": 280,
        "wires": []
    },
    {
        "id": "54a019b169729c69",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "0460f41c928aef8f"
            ],
            [
                "fa20975b5ffde22c"
            ]
        ]
    },
    {
        "id": "aa91185e5d5a25e1",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "fa20975b5ffde22c",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 260,
        "wires": [
            [
                "aa91185e5d5a25e1"
            ]
        ]
    },
    {
        "id": "b2e40b5de9099cf4",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 200,
        "wires": [
            [
                "20f7357695b26aa8"
            ],
            [
                "ed152ac4514b4399"
            ]
        ]
    },
    {
        "id": "7670ff903689d835",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 1680,
        "y": 300,
        "wires": []
    },
    {
        "id": "ed152ac4514b4399",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1700,
        "y": 260,
        "wires": [
            [
                "7670ff903689d835"
            ]
        ]
    },
    {
        "id": "98a0c35f4d38f37f",
        "type": "switch",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 280,
        "wires": [
            [
                "3b111b6afac1790d"
            ],
            [
                "e2adb7a604451e55"
            ]
        ]
    },
    {
        "id": "e2adb7a604451e55",
        "type": "change",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2140,
        "y": 340,
        "wires": [
            [
                "2596021eeda7b11e"
            ]
        ]
    },
    {
        "id": "2596021eeda7b11e",
        "type": "http response",
        "z": "3a3a41a0d95d74c4",
        "name": "",
        "statusCode": "500",
        "headers": {},
        "x": 2160,
        "y": 380,
        "wires": []
    },
    {
        "id": "24214884693edfa2",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `select * from digaportal.v_getsysroleuser2`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "40248a209f3fdb0c"
            ]
        ]
    },
    {
        "id": "40248a209f3fdb0c",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "dd4fb4fce5680691"
            ]
        ]
    },
    {
        "id": "f183a287ee95d591",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 120,
        "wires": []
    },
    {
        "id": "dd4fb4fce5680691",
        "type": "change",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "users",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"keys\":[[\"reference\",\"smart-corp-role\"],[\"reference\",\"smart-system-role\"]]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 160,
        "wires": [
            [
                "99dafc8417f56638"
            ]
        ]
    },
    {
        "id": "99dafc8417f56638",
        "type": "cloudantplus in",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 500,
        "y": 200,
        "wires": [
            [
                "f5aa11d58f518d50"
            ]
        ]
    },
    {
        "id": "f5aa11d58f518d50",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "mapping result",
        "func": "msg.corpRole = msg.payload.find(x => x.key[1] === 'smart-corp-role').data;\nmsg.systemRole = msg.corpRole = msg.payload.find(x => x.key[1] === 'smart-system-role').data;\nlet users = msg.users.map(x => {\n    let algorithm = 'aes256';\n    let key = env.get('CRYPTO_KEY');\n    let iv = env.get('CRYPTO_IV');\n    let cipher = crypto.createCipheriv(algorithm, key, iv);\n    let encrypted = cipher.update(`${x.NIK};pass`, 'utf8', 'hex') + cipher.final('hex');\n    let type = 'non-adfs';\n    if (/^\\d+$/.test(x.NIK) && x.NIK.length === 8) type = 'adfs';\n\n    return {\n        nik: x.NIK,\n        type: type,\n        fullName: x.szFullName,\n        email: x.szEmailAddress,\n        occupation: msg.corpRole.find(r => r.origin === x.szCorpRoleName)?.code || null,\n        roles: {\n            corp: msg.corpRole.find(r => r.origin === x.szCorpRoleName)?.code || null,\n            system: msg.systemRole.filter(r => r.origin === x.szSysRoleName).map(r => r.code) || null\n        },\n        authorizations: [\n            {\n                type: 'password',\n                passwords: [encrypted]\n            }\n        ]\n    }\n});\nmsg.documents = {\n    docs: users\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "8f9ff0f95018dd01"
            ]
        ]
    },
    {
        "id": "36b892547277fd3e",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 120,
        "wires": [
            [
                "f183a287ee95d591"
            ]
        ]
    },
    {
        "id": "8f9ff0f95018dd01",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "delete database",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "292e9cb262adf6cc"
            ]
        ]
    },
    {
        "id": "292e9cb262adf6cc",
        "type": "http request",
        "z": "35d2cc8d792ddb2a",
        "name": "create database",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-users",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "b6ef183ef6f342f9"
            ]
        ]
    },
    {
        "id": "b6ef183ef6f342f9",
        "type": "change",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "documents",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 80,
        "wires": [
            [
                "36b892547277fd3e"
            ]
        ]
    },
    {
        "id": "be7488b241be2426",
        "type": "promptinput",
        "z": "35d2cc8d792ddb2a",
        "name": "confirm",
        "datatype": "str",
        "prompt": "this process will overwriten smart-users data, are you sure ? yes / no",
        "property": "payload",
        "propertyType": "msg",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "e76b6489929bdac5"
            ]
        ]
    },
    {
        "id": "e76b6489929bdac5",
        "type": "switch",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 80,
        "wires": [
            [
                "24214884693edfa2"
            ]
        ]
    },
    {
        "id": "5b4debb4c819653b",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `\nselect\n\ttab.iOrgID,\n\tvalRef.szValueRef as cCategory,\n\ttab.szOrgName as ChildName,\n\ttab.szDescription as ChildDesc,\n\tparent.iOrgID as ParentID,\n\tparRef.szValueRef as pCategory,\n\tparent.szOrgName as ParentName,\n\tparent.szDescription as ParentDesc\nfrom\n\tdigaportal.oa_organization tab\nleft join digaportal.oa_organization parent on\n\ttab.szParentOrgID = parent.iOrgID\nleft join digaportal.gn_valueref valRef on\n\ttab.iOrgCatID = valRef.iValueRefID\nleft join digaportal.gn_valueref parRef on\n\tparent.iOrgCatID = parRef.iValueRefID\norder by\n\ttab.iOrgID\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "39b354d40ed8a1be"
            ]
        ]
    },
    {
        "id": "39b354d40ed8a1be",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 300,
        "y": 340,
        "wires": [
            [
                "99053d0de0ebc04b"
            ]
        ]
    },
    {
        "id": "c6797d015f1c1a35",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "99053d0de0ebc04b",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "function 3",
        "func": "let root = msg.payload.filter(x => x.ParentID === null);;\nlet rs = [];\nroot.forEach(x => {\n    rs.push({\n        id: x.iOrgID,\n        name: x.ChildName.toUpperCase(),\n        desc: x.ChildDesc,\n        category: x.cCategory.toUpperCase(),\n        children: getChildren(msg.payload, x.iOrgID)\n    });\n});\nmsg.payload = rs;\nreturn msg;\n\nfunction getChildren(data, parentID) {\n    let result = [];\n    for (let i = 0; i < data.length; i++) {\n        let item = data[i];\n        if (item.ParentID === parentID) {\n            result.push({\n                id: item.iOrgID,\n                name: item.ChildName.toUpperCase(),\n                desc: item.ChildDesc,\n                category: (item.cCategory.toUpperCase().includes(\"ROAD\")) ? \"ROAD\" : item.cCategory.toUpperCase(),\n                children: (data.some(x => x.ParentID === parentID)) ? getChildren(data, item.iOrgID) : null\n            })\n        }\n    }\n    return result;\n}\n\n// function getChildren(data, parentID) {\n//     let result = [];\n//     for (let i = 0; i < data.length; i++) {\n//         let item = data[i];\n//         if (item.ParentID === parentID) {\n//             result.push({\n//                 id: item.iOrgID,\n//                 name: item.ChildName.toUpperCase(),\n//                 desc: item.ChildDesc,\n//                 category: (item.cCategory.toUpperCase().includes(\"ROAD\")) ? \"ROAD\" : item.cCategory.toUpperCase(),\n//                 children: (data.some(x => x.ParentID === parentID)) ? getChildren(data.filter(x => x.ParentID === parentID), item.iOrgID) : null\n//             })\n//         }\n//     }\n//     return result;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "c6797d015f1c1a35"
            ]
        ]
    },
    {
        "id": "9a395cb0556025f3",
        "type": "inject",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "5b4debb4c819653b"
            ]
        ]
    },
    {
        "id": "5074b4b5d2488f4c",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "set query",
        "func": "msg.topic = `\nselect\n\tszValueRef as label,\n\tszValueRefDescription as description,\n\tszCategory as category,\n\tszCategory2 as category2,\n\tszCategory3 as category3,\n\tszCategory4 as category4,\n\tszCategory5 as category5\nfrom\n\tgn_valueref gv\norder by\n\tszCategory,\n\tszCategory2,\n\tszCategory3,\n\tszCategory4,\n\tszCategory5\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "53b9204cb4d470b1"
            ]
        ]
    },
    {
        "id": "53b9204cb4d470b1",
        "type": "mysql2",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "a78e0a347e852e3d"
            ]
        ]
    },
    {
        "id": "d616f6a00d4a5f6d",
        "type": "debug",
        "z": "35d2cc8d792ddb2a",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 540,
        "wires": []
    },
    {
        "id": "a78e0a347e852e3d",
        "type": "function",
        "z": "35d2cc8d792ddb2a",
        "name": "function 4",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "d616f6a00d4a5f6d"
            ]
        ]
    },
    {
        "id": "5270905cc4ac9962",
        "type": "inject",
        "z": "35d2cc8d792ddb2a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "5074b4b5d2488f4c"
            ]
        ]
    },
    {
        "id": "9ae2b5c84660f97f",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "e55f4d0f605df90a"
            ]
        ]
    },
    {
        "id": "54ae63fd2179cae5",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "e55f4d0f605df90a",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = {\n    nik: '09001040',\n    fullName: 'Ahmad Nuroffiq',\n    email: 'staff.rc.pmse@sinarmas-agri.com',\n    occupation: 'RCS',\n    roles: ['SFR']\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 60,
        "wires": [
            [
                "5a727d33d0fe446c"
            ]
        ]
    },
    {
        "id": "5a727d33d0fe446c",
        "type": "subflow:77002254b872fa8e",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 290,
        "y": 100,
        "wires": [
            [
                "54ae63fd2179cae5"
            ]
        ]
    },
    {
        "id": "a77291f3c5c33cc0",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "1755b545d754801e"
            ]
        ]
    },
    {
        "id": "993afa7afcd3c77b",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 240,
        "wires": []
    },
    {
        "id": "1755b545d754801e",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "// msg.sub = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWsiOiIwOTAwMTA0MCIsImZ1bGxOYW1lIjoiQWhtYWQgTnVyb2ZmaXEiLCJlbWFpbCI6InN0YWZmLnJjLnBtc2VAc2luYXJtYXMtYWdyaS5jb20iLCJvY2N1cGF0aW9uIjoiUkNTIiwicm9sZXMiOlsiU0ZSIl0sImlhdCI6MTY3NjYyMDE0MSwiZXhwIjoxNjc2NzkyOTQxfQ.LycdE5eTfYbAecB5cJ2JW8EQShn5NPpvDGxvP1qPq_c`;\nmsg.sub = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuaWsiOiIwOTAwMTA0MCIsImZ1bGxOYW1lIjoiQWhtYWQgTnVyb2ZmaXEiLCJlbWFpbCI6InN0YWZmLnJjLnBtc2VAc2luYXJtYXMtYWdyaS5jb20iLCJvY2N1cGF0aW9uIjoiUkNTIiwicm9sZXMiOlsiU0ZSIl0sImlhdCI6MTY3Njg2MTYyMywiZXhwIjoxNjc3MDM0NDIzfQ.2qCafDVE3C6NiO5V1Gt_PeKN5LSfc_1j1c-SLlkuWgw`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "a175eeab9871e24a"
            ]
        ]
    },
    {
        "id": "a175eeab9871e24a",
        "type": "subflow:32e9ed8660fb2fde",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 300,
        "y": 240,
        "wires": [
            [
                "993afa7afcd3c77b"
            ]
        ]
    },
    {
        "id": "3e66c4a31f8d9450",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "7d867c3ead24190c"
            ]
        ]
    },
    {
        "id": "82e9d4324cdb2728",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 380,
        "wires": []
    },
    {
        "id": "ee46f0cd97686a3b",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "5a0ec661e1909bfd"
            ]
        ]
    },
    {
        "id": "01da5252c1115b9a",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "f21bf607484f07da",
        "type": "subflow:0f802e687dcc9e4a",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "82e9d4324cdb2728"
            ]
        ]
    },
    {
        "id": "7d867c3ead24190c",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = `MyPassword`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "f21bf607484f07da"
            ]
        ]
    },
    {
        "id": "85bdb66ce6238ce7",
        "type": "subflow:c9c1579a9da27745",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 320,
        "y": 500,
        "wires": [
            [
                "01da5252c1115b9a"
            ]
        ]
    },
    {
        "id": "5a0ec661e1909bfd",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare jwt payload",
        "func": "msg.sub = {\n    password: 'MyPassword',\n    hash: '$2b$10$UsmqL2Pt3SwjJWXtAmT14OVEYUSiceuFL92gjQD/bEM.eWMWypqfi'\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "85bdb66ce6238ce7"
            ]
        ]
    },
    {
        "id": "28c35bf75fb40d3c",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "6e6b190070972e0d"
            ]
        ]
    },
    {
        "id": "aa11f6c7f9ace759",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 620,
        "wires": []
    },
    {
        "id": "6e6b190070972e0d",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare payload to encrypt",
        "func": "msg.sub = \"some random text\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 580,
        "wires": [
            [
                "046cff1505c0dc35"
            ]
        ]
    },
    {
        "id": "e6d2df7c5e4c084d",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "85ac96e7de1d3a13"
            ]
        ]
    },
    {
        "id": "14d0cc3b742d1f15",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 740,
        "wires": []
    },
    {
        "id": "85ac96e7de1d3a13",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare encrypt",
        "func": "msg.sub = \"d15cac3ea87e3fca0b51be2662c4e48135679b8ab52ab656ef3309e35d9e43d4\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 700,
        "wires": [
            [
                "e1957673de771643"
            ]
        ]
    },
    {
        "id": "046cff1505c0dc35",
        "type": "subflow:cfa2e326ca547b07",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "aa11f6c7f9ace759"
            ]
        ]
    },
    {
        "id": "e1957673de771643",
        "type": "subflow:c2f437acbbab02bd",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "14d0cc3b742d1f15"
            ]
        ]
    },
    {
        "id": "95c371352dac6288",
        "type": "catch",
        "z": "bf22cd3c7ed55a35",
        "d": true,
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 760,
        "y": 100,
        "wires": [
            [
                "9c4c5aa5bc6d0c04"
            ]
        ]
    },
    {
        "id": "9c4c5aa5bc6d0c04",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 14",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "fba20105cfbaa67f",
        "type": "subflow:f804f4dc33b60992",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "env": [
            {
                "name": "test",
                "value": "afadfa",
                "type": "str"
            }
        ],
        "x": 1010,
        "y": 240,
        "wires": [
            [
                "c1f08ce0466fcbef"
            ]
        ]
    },
    {
        "id": "9eeb68915a120a70",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 200,
        "wires": [
            [
                "6328a57e47771e7b"
            ]
        ]
    },
    {
        "id": "6328a57e47771e7b",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare root, topic, pointer, criterya",
        "func": "msg.sub = {\n    root: 5008,\n    topic: 'area',\n    pointer: 5068,\n    crit: [\n        {\n            key: 'category',\n            val: 'BLOCK'\n        },\n        {\n            key: 'parentId',\n            val: 5128\n        }\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "fba20105cfbaa67f"
            ]
        ]
    },
    {
        "id": "c1f08ce0466fcbef",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 240,
        "wires": []
    },
    {
        "id": "f8d777bea3c0d2f3",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "sub",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "d9cb860952c43548"
            ]
        ]
    },
    {
        "id": "c6f1402a0e7d6be4",
        "type": "subflow:25a729f30c43b341",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "90258e6c5dbb6759"
            ]
        ]
    },
    {
        "id": "90258e6c5dbb6759",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 340,
        "wires": []
    },
    {
        "id": "d9cb860952c43548",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "prepare nik & scope code",
        "func": "msg.sub = 'SC-SAW-AREA-00001';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "c6f1402a0e7d6be4"
            ]
        ]
    },
    {
        "id": "23b9198797a52319",
        "type": "inject",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "0ebe8540543b7d8c"
            ]
        ]
    },
    {
        "id": "700da8c33ddfbfb7",
        "type": "cloudantplus in",
        "z": "bf22cd3c7ed55a35",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-blueprint",
        "service": "_ext_",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 300,
        "y": 880,
        "wires": [
            [
                "5ae606c4e4cb301c"
            ]
        ]
    },
    {
        "id": "0ebe8540543b7d8c",
        "type": "function",
        "z": "bf22cd3c7ed55a35",
        "name": "function 20",
        "func": "msg.payload = {\n    keys: [\n        \"53d89bcba9e2c7202f43c9edcc0604c0\",\n        \"8bc73c31c8ebe86e7078a3ff480058d9\"\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 840,
        "wires": [
            [
                "700da8c33ddfbfb7"
            ]
        ]
    },
    {
        "id": "5ae606c4e4cb301c",
        "type": "debug",
        "z": "bf22cd3c7ed55a35",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 880,
        "wires": []
    },
    {
        "id": "f23842780cb1d49b",
        "type": "http in",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "url": "/api/scope/by-code/:code",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "9f357abbdd2352e3"
            ]
        ]
    },
    {
        "id": "0726dd0c9132bef2",
        "type": "http response",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "257f92ed99f76054",
        "type": "subflow:25a729f30c43b341",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "37b364bb5aa29dd3"
            ]
        ]
    },
    {
        "id": "749b5d0f57e3a633",
        "type": "http in",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "url": "/api/scope/filter",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "01b2128d5af1714b"
            ]
        ]
    },
    {
        "id": "01b2128d5af1714b",
        "type": "function",
        "z": "c13d19c3dfb652c9",
        "name": "backup req body",
        "func": "msg.body = msg.payload;\nmsg.sub = msg.payload.code;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "3504d74febe43971"
            ]
        ]
    },
    {
        "id": "3504d74febe43971",
        "type": "subflow:25a729f30c43b341",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "5c4f365b10f99418"
            ]
        ]
    },
    {
        "id": "5c4f365b10f99418",
        "type": "function",
        "z": "c13d19c3dfb652c9",
        "name": "filter by criteria",
        "func": "try {\n    let scope = msg.sub;\n    msg.payload = scope;\n    if (msg.body.crit && msg.body.crit.length > 0) {\n        msg.payload = filterFlat(scope, msg.body.crit);\n    }\n    msg.statusCode = 200;\n} catch (error) {\n    msg.payload = error.message;\n    msg.statusCode = 500;\n}\n\nreturn msg;\n\nfunction filterFlat(flatObj, crit) {\n    return flatObj.filter(x => {\n        let params = [];\n        crit.forEach(c => {\n            let rs = false;\n            if (Array.isArray(c.val)) {\n                rs = c.val.some(s => x[c.key] === s)\n            } else {\n                rs = x[c.key] === c.val\n            }\n            params.push(rs);\n        });\n        return params.reduce((acc, val) => acc && val, true);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "f99e6d3131f88a2d"
            ]
        ]
    },
    {
        "id": "f99e6d3131f88a2d",
        "type": "http response",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "9f357abbdd2352e3",
        "type": "change",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sub",
                "pt": "msg",
                "to": "req.params.code",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 60,
        "wires": [
            [
                "257f92ed99f76054"
            ]
        ]
    },
    {
        "id": "21d45f21f7cdcbb5",
        "type": "http in",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "url": "/api/scope/by-user-scopes",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "bb396ecdcc26ed62"
            ]
        ]
    },
    {
        "id": "bb396ecdcc26ed62",
        "type": "function",
        "z": "c13d19c3dfb652c9",
        "name": "prepare sub",
        "func": "msg.sub = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 380,
        "wires": [
            [
                "c7c888a9bc474236"
            ]
        ]
    },
    {
        "id": "c7c888a9bc474236",
        "type": "subflow:dbbf76b23c84dc6a",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "dd318b2a57cc1594"
            ]
        ]
    },
    {
        "id": "dd318b2a57cc1594",
        "type": "function",
        "z": "c13d19c3dfb652c9",
        "name": "return",
        "func": "msg.payload = msg.sub;\nmsg.statusCode = 200;\nif(msg.error){\n    msg.payload = msg.error;\n    msg.statusCode = 500;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 460,
        "wires": [
            [
                "3fe12714d68fcc36"
            ]
        ]
    },
    {
        "id": "3fe12714d68fcc36",
        "type": "http response",
        "z": "c13d19c3dfb652c9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "37b364bb5aa29dd3",
        "type": "function",
        "z": "c13d19c3dfb652c9",
        "name": "return",
        "func": "try {\n    msg.payload = msg.sub;\n    msg.statusCode = 200;\n} catch (error) {\n    msg.payload = error.message;\n    msg.statusCode = 500;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "0726dd0c9132bef2"
            ]
        ]
    },
    {
        "id": "c4fea9f1ad696a34",
        "type": "http in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "url": "/admin/user/by-nik/:nik",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "d33d8c056a1f4d24"
            ]
        ]
    },
    {
        "id": "380505713f9e3b39",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "6e11d0b7988b54f7",
        "type": "cloudantplus in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-users",
        "service": "_ext_",
        "search": "_view_",
        "design": "view-user",
        "index": "by-nik",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "64e77441ea08b126"
            ]
        ]
    },
    {
        "id": "d33d8c056a1f4d24",
        "type": "function",
        "z": "0ee186eb42c82e4f",
        "name": "function 14",
        "func": "msg.payload = {\n    \"key\": msg.req.params.nik\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "6e11d0b7988b54f7"
            ]
        ]
    },
    {
        "id": "d7308c07b96b7e55",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 120,
        "wires": [
            [
                "380505713f9e3b39"
            ]
        ]
    },
    {
        "id": "b236983bf6c11150",
        "type": "http in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "url": "/admin/user",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "f2a6f59cf563e88b"
            ]
        ]
    },
    {
        "id": "f2a6f59cf563e88b",
        "type": "function",
        "z": "0ee186eb42c82e4f",
        "name": "payload validation",
        "func": "msg.ori = msg.payload;\nlet { nik, loginType, fullName, corpRole, systemRoles, scopes } = msg.ori;\nlet valid = (nik && loginType && fullName && corpRole && systemRoles && scopes) ? true : false;\nmsg.payload = {\n    \"key\": msg.payload.nik\n}\nmsg.isValid = valid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "6ec134f08dfe67d9"
            ]
        ]
    },
    {
        "id": "4277d03c960139cc",
        "type": "cloudantplus in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-users",
        "service": "_ext_",
        "search": "_view_",
        "design": "view-user",
        "index": "by-nik",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "c02494e3fc398076"
            ]
        ]
    },
    {
        "id": "9829d70ab169979b",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 340,
        "wires": [
            [
                "03e0e7c02be30e91"
            ]
        ]
    },
    {
        "id": "f884ce7714dd376d",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1180,
        "y": 420,
        "wires": []
    },
    {
        "id": "c02494e3fc398076",
        "type": "switch",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "9829d70ab169979b"
            ],
            [
                "2cccae7699d81b5d"
            ]
        ]
    },
    {
        "id": "313e72f6c5205046",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 960,
        "y": 520,
        "wires": []
    },
    {
        "id": "6ec134f08dfe67d9",
        "type": "switch",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 400,
        "wires": [
            [
                "4277d03c960139cc"
            ],
            [
                "14612c1bfec7d8cd"
            ]
        ]
    },
    {
        "id": "8d23b3d447bb1347",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 740,
        "y": 520,
        "wires": []
    },
    {
        "id": "03e0e7c02be30e91",
        "type": "function",
        "z": "0ee186eb42c82e4f",
        "name": "function 18",
        "func": "let user = msg.payload;\nlet { loginType, fullName, email, corpRole, systemRoles, useSpesificScope, combo, scopes} = msg.ori;\nuser['loginType'] = loginType;\nuser['fullName'] = fullName;\nuser['email'] = email;\nuser['corpRole'] = corpRole;\nuser['systemRoles'] = systemRoles;\nuser['useSpesificScope'] = useSpesificScope;\nuser['combo'] = combo;\nuser['scopes'] = scopes;\n// delete user._rev;\nmsg.payload = user;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 380,
        "wires": [
            [
                "c856f08909a66049"
            ]
        ]
    },
    {
        "id": "c856f08909a66049",
        "type": "cloudantplus out",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-users",
        "service": "_ext_",
        "payonly": true,
        "operation": "insert",
        "x": 970,
        "y": 420,
        "wires": [
            [
                "f884ce7714dd376d"
            ]
        ]
    },
    {
        "id": "14612c1bfec7d8cd",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload not valid",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 480,
        "wires": [
            [
                "8d23b3d447bb1347"
            ]
        ]
    },
    {
        "id": "2cccae7699d81b5d",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "user not found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 480,
        "wires": [
            [
                "313e72f6c5205046"
            ]
        ]
    },
    {
        "id": "64e77441ea08b126",
        "type": "switch",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "d7308c07b96b7e55"
            ],
            [
                "a9196ec681d4b2bd"
            ]
        ]
    },
    {
        "id": "4ced71eba12ca1fc",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "a9196ec681d4b2bd",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "user not found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 200,
        "wires": [
            [
                "4ced71eba12ca1fc"
            ]
        ]
    },
    {
        "id": "82122e00922085ab",
        "type": "http in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "url": "/admin/user/system-roles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 660,
        "wires": [
            [
                "4b94c2d9123ae31b"
            ]
        ]
    },
    {
        "id": "4b94c2d9123ae31b",
        "type": "function",
        "z": "0ee186eb42c82e4f",
        "name": "function 27",
        "func": "msg.payload = 'smart-system-roles'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "f584481a9b03bb93"
            ]
        ]
    },
    {
        "id": "f584481a9b03bb93",
        "type": "cloudantplus in",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-configs",
        "service": "_ext_",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 520,
        "y": 700,
        "wires": [
            [
                "884b93a38e6258da"
            ]
        ]
    },
    {
        "id": "884b93a38e6258da",
        "type": "change",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 740,
        "wires": [
            [
                "482a0f53f9b4f9c6"
            ]
        ]
    },
    {
        "id": "482a0f53f9b4f9c6",
        "type": "http response",
        "z": "0ee186eb42c82e4f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 780,
        "y": 740,
        "wires": []
    },
    {
        "id": "c86674137cc829c6",
        "type": "cloudantplus in",
        "z": "bef67a5c91d12113",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-topic",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "029f2e05aff9b94b"
            ]
        ]
    },
    {
        "id": "029f2e05aff9b94b",
        "type": "function",
        "z": "bef67a5c91d12113",
        "name": "function 15",
        "func": "let rs = [];\nif(msg.payload.length > 0){\n    rs = msg.payload[0].data;\n}\nmsg.payload = rs;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "92eccbb9fdeeb25a"
            ]
        ]
    },
    {
        "id": "ad1137e2ade11e9d",
        "type": "function",
        "z": "bef67a5c91d12113",
        "name": "function 16",
        "func": "msg.payload = {\n    key: [\"hierarchy\", msg.req.params.topic]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": [
            [
                "c86674137cc829c6"
            ]
        ]
    },
    {
        "id": "8f44a35fde54323e",
        "type": "http in",
        "z": "bef67a5c91d12113",
        "name": "",
        "url": "/admin/hierarchy/by-topic/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "ad1137e2ade11e9d"
            ]
        ]
    },
    {
        "id": "92eccbb9fdeeb25a",
        "type": "http response",
        "z": "bef67a5c91d12113",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 780,
        "y": 140,
        "wires": []
    },
    {
        "id": "a9de0e68a05b5826",
        "type": "http in",
        "z": "bef67a5c91d12113",
        "name": "",
        "url": "/admin/hierarchy/by-code/:code",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "52f6e399b5edd3a0"
            ]
        ]
    },
    {
        "id": "3927a48dc1340f76",
        "type": "cloudantplus in",
        "z": "bef67a5c91d12113",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "hierarchy",
        "index": "code",
        "x": 540,
        "y": 260,
        "wires": [
            [
                "5743b37dc5b5f8cb"
            ]
        ]
    },
    {
        "id": "5743b37dc5b5f8cb",
        "type": "function",
        "z": "bef67a5c91d12113",
        "name": "function 32",
        "func": "let rs = [];\nif(msg.payload.length > 0){\n    rs = msg.payload[0].data;\n}\nmsg.payload = rs;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "9dac3bcc6627505a"
            ]
        ]
    },
    {
        "id": "52f6e399b5edd3a0",
        "type": "function",
        "z": "bef67a5c91d12113",
        "name": "function 33",
        "func": "msg.payload = {\n    key: msg.req.params.code\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "3927a48dc1340f76"
            ]
        ]
    },
    {
        "id": "9dac3bcc6627505a",
        "type": "http response",
        "z": "bef67a5c91d12113",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "1f0a525d6655b092",
        "type": "http in",
        "z": "50baf2723fb4853b",
        "name": "",
        "url": "/admin/libs/by-code/:code",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "a850381a762322aa"
            ]
        ]
    },
    {
        "id": "a850381a762322aa",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "prepare",
        "func": "msg.payload = {\n    key: msg.req.params.code\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "fbc6d0e4a84361e0"
            ]
        ]
    },
    {
        "id": "fbc6d0e4a84361e0",
        "type": "cloudantplus in",
        "z": "50baf2723fb4853b",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "4862f871a79aaab3"
            ]
        ]
    },
    {
        "id": "4862f871a79aaab3",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "prepare payload",
        "func": "let rs = [];\nif(msg.payload.length > 0){\n    rs = msg.payload[0];\n    msg.payload = rs;\n    msg.statusCode = 200;\n}else{\n    msg.statusCode = 400;\n    msg.payload = 'document not found'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "bc12b569bb0fea58"
            ]
        ]
    },
    {
        "id": "bc12b569bb0fea58",
        "type": "http response",
        "z": "50baf2723fb4853b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "7156cad721d06526",
        "type": "http in",
        "z": "50baf2723fb4853b",
        "name": "",
        "url": "/admin/libs/by-id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "fcdad3486c629196"
            ]
        ]
    },
    {
        "id": "88c031c5f4967e47",
        "type": "http response",
        "z": "50baf2723fb4853b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 940,
        "y": 360,
        "wires": []
    },
    {
        "id": "7cdcac0ff194726d",
        "type": "cloudantplus in",
        "z": "50baf2723fb4853b",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_id_",
        "design": "type",
        "index": "by-type-topic-code",
        "x": 500,
        "y": 320,
        "wires": [
            [
                "c5564fd183212f1a"
            ]
        ]
    },
    {
        "id": "fcdad3486c629196",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": " [type, topic, code]",
        "func": "let {_id, _rev, ...rest} = msg.payload;\nmsg.ori = rest;\nmsg.payload = _id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "7cdcac0ff194726d"
            ]
        ]
    },
    {
        "id": "2e1344e0cac458a7",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "prepare doc",
        "func": "let {_id, _rev} = msg.payload;\nmsg.payload = {\n    _id,\n    _rev,\n    ...msg.ori\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 320,
        "wires": [
            [
                "d8522d60df53676d"
            ]
        ]
    },
    {
        "id": "d8522d60df53676d",
        "type": "cloudantplus out",
        "z": "50baf2723fb4853b",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "payonly": true,
        "operation": "insert",
        "x": 740,
        "y": 360,
        "wires": [
            [
                "88c031c5f4967e47",
                "48c14bf3688ce5c8"
            ]
        ]
    },
    {
        "id": "c5564fd183212f1a",
        "type": "switch",
        "z": "50baf2723fb4853b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "2e1344e0cac458a7"
            ],
            [
                "26d5ddc910e8b52f"
            ]
        ]
    },
    {
        "id": "26d5ddc910e8b52f",
        "type": "http response",
        "z": "50baf2723fb4853b",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 740,
        "y": 420,
        "wires": []
    },
    {
        "id": "7928259645991d91",
        "type": "http in",
        "z": "50baf2723fb4853b",
        "name": "",
        "url": "/admin/ref/select-options",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "7b29f4717e35142e"
            ]
        ]
    },
    {
        "id": "7b29f4717e35142e",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "check & prepare",
        "func": "msg.ori = msg.payload;\nlet {topic, keyToVal, keyToLabel} = msg.payload;\nlet valid = false;\nif(topic && keyToVal && keyToLabel) valid = true;\n\nmsg.isValid = valid;\nmsg.payload = {\n    key: msg.payload.topic\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "2955f04667917859"
            ]
        ]
    },
    {
        "id": "2955f04667917859",
        "type": "switch",
        "z": "50baf2723fb4853b",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 560,
        "wires": [
            [
                "0688100feb02c9e6"
            ],
            [
                "8edab228d804f32b"
            ]
        ]
    },
    {
        "id": "0688100feb02c9e6",
        "type": "cloudantplus in",
        "z": "50baf2723fb4853b",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "refs",
        "index": "by-topic",
        "x": 740,
        "y": 520,
        "wires": [
            [
                "3a48b6af21a8db75"
            ]
        ]
    },
    {
        "id": "8edab228d804f32b",
        "type": "http response",
        "z": "50baf2723fb4853b",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 740,
        "y": 640,
        "wires": []
    },
    {
        "id": "3a48b6af21a8db75",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "prepare options",
        "func": "let rs = [];\nlet { keyToVal, keyToLabel } = msg.ori;\n\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    let data = msg.payload[0].data;\n    if (data && Array.isArray(data)) {\n        data.forEach(d => {\n            rs.push({\n                value: (d[keyToVal]) ? d[keyToVal] : null,\n                label: (d[keyToLabel]) ? d[keyToLabel] : null\n            })\n        })\n    }\n}\nmsg.payload = rs;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 560,
        "wires": [
            [
                "bf3e7183af4f6b01"
            ]
        ]
    },
    {
        "id": "bf3e7183af4f6b01",
        "type": "http response",
        "z": "50baf2723fb4853b",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 560,
        "wires": []
    },
    {
        "id": "aa4e6a56f1201151",
        "type": "redis-command",
        "z": "50baf2723fb4853b",
        "server": "0fb96b870afb5c15",
        "command": "DEL",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "e85b39fe16903cdb"
            ]
        ]
    },
    {
        "id": "e85b39fe16903cdb",
        "type": "debug",
        "z": "50baf2723fb4853b",
        "name": "debug 26",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 400,
        "wires": []
    },
    {
        "id": "48c14bf3688ce5c8",
        "type": "function",
        "z": "50baf2723fb4853b",
        "name": "function 26",
        "func": "msg.topic = `scope:${msg.ori.code}`;\nmsg.payload = null;\ndelete msg.ori;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "aa4e6a56f1201151"
            ]
        ]
    },
    {
        "id": "a9e10fe5cca4e39f",
        "type": "http in",
        "z": "d0ef491d8730ea48",
        "name": "",
        "url": "/api/blueprint/page/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "5b79b297f83f24c7"
            ]
        ]
    },
    {
        "id": "5b79b297f83f24c7",
        "type": "function",
        "z": "d0ef491d8730ea48",
        "name": "set key",
        "func": "msg.sub = msg.req.params.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "e4d5c393c14d37a3"
            ]
        ]
    },
    {
        "id": "c46864b04d26159f",
        "type": "http response",
        "z": "d0ef491d8730ea48",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "e4d5c393c14d37a3",
        "type": "subflow:9e1a5ed360837111",
        "z": "d0ef491d8730ea48",
        "name": "",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "4646c353cd3c1140"
            ]
        ]
    },
    {
        "id": "4646c353cd3c1140",
        "type": "function",
        "z": "d0ef491d8730ea48",
        "name": "result",
        "func": "if (msg.sub != null) {\n    msg.statusCode = 200;\n    msg.payload = msg.sub;\n} else {\n    msg.statusCode = 400;\n    msg.payload = {\n        hint: 'page not found'\n    }\n\n    if (msg.error) {\n        msg.statusCode = 500;\n        msg.payload = msg.error;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "c46864b04d26159f"
            ]
        ]
    },
    {
        "id": "3653f1b59ac43d23",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "7510047f37bdee05"
            ]
        ]
    },
    {
        "id": "ce895a4cf9597e04",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehiclepositions",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/vehiclepositions?size=2000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 410,
        "y": 140,
        "wires": [
            [
                "3653f1b59ac43d23"
            ]
        ]
    },
    {
        "id": "e1509d66ddce4f68",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 12",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "ce895a4cf9597e04"
            ]
        ]
    },
    {
        "id": "b54662cce8df2b14",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 180,
        "wires": []
    },
    {
        "id": "64aa3dd0a5ed610e",
        "type": "catch",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "scope": [
            "3653f1b59ac43d23",
            "ce895a4cf9597e04",
            "e1509d66ddce4f68",
            "29fcbcf1031024cb",
            "2d1679d174ec0ca8",
            "4d4789372c0b02b2",
            "a3cf852138203866",
            "7e902022fa305aeb"
        ],
        "uncaught": false,
        "x": 1050,
        "y": 40,
        "wires": [
            [
                "6640ae2f60f53b0c"
            ]
        ]
    },
    {
        "id": "5752655b2f043898",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "e1509d66ddce4f68"
            ]
        ]
    },
    {
        "id": "7510047f37bdee05",
        "type": "switch",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b4f97edae7789e18",
                "b7ad417b24957447"
            ],
            [
                "666488dda2f67f77"
            ]
        ]
    },
    {
        "id": "666488dda2f67f77",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 23",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "b54662cce8df2b14"
            ]
        ]
    },
    {
        "id": "a4b12276bbdddc5e",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "21b07d215dbdd4fe"
            ]
        ]
    },
    {
        "id": "3fd4fae1e0a969d5",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1020,
        "wires": []
    },
    {
        "id": "21b07d215dbdd4fe",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 24",
        "func": "msg.payload = [\"hino:speed\", \n    1681903255000, 31,\n    \"LABELS\", \"vim\", \"MJEC1JG43N5201104\",\n    \"vehicleStatus\", \"OFF\"\n]\nmsg.topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 980,
        "wires": [
            [
                "ecd11c5d24bfe791"
            ]
        ]
    },
    {
        "id": "ecd11c5d24bfe791",
        "type": "redis-command",
        "z": "2e56a74c132aeaaf",
        "server": "3cc67d60c90e6c5d",
        "command": "TS.ADD",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "3fd4fae1e0a969d5"
            ]
        ]
    },
    {
        "id": "29fcbcf1031024cb",
        "type": "redis-command",
        "z": "2e56a74c132aeaaf",
        "server": "3cc67d60c90e6c5d",
        "command": "TS.ADD",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 880,
        "y": 280,
        "wires": [
            [
                "4bade8d3bb8a63aa"
            ]
        ]
    },
    {
        "id": "0252672c8a320eef",
        "type": "change",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "null",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 240,
        "wires": [
            [
                "29fcbcf1031024cb"
            ]
        ]
    },
    {
        "id": "a5dbf084af25a58b",
        "type": "split",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 280,
        "wires": [
            [
                "0252672c8a320eef"
            ]
        ]
    },
    {
        "id": "6640ae2f60f53b0c",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 40,
        "wires": []
    },
    {
        "id": "4bade8d3bb8a63aa",
        "type": "join",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1050,
        "y": 280,
        "wires": [
            [
                "b54662cce8df2b14"
            ]
        ]
    },
    {
        "id": "a02a5998c93e9f87",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 25",
        "func": "msg.payload = [\"gps_tracking_data\", 1647150000, 1647160000]\nmsg.topic = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "82dabd8ab6cdd216"
            ]
        ]
    },
    {
        "id": "82dabd8ab6cdd216",
        "type": "redis-command",
        "z": "2e56a74c132aeaaf",
        "server": "0fb96b870afb5c15",
        "command": "ZRANGEBYSCORE",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 370,
        "y": 1100,
        "wires": [
            [
                "7e1da47f1b4f2f55"
            ]
        ]
    },
    {
        "id": "19c16317cdfbf697",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "a02a5998c93e9f87"
            ]
        ]
    },
    {
        "id": "7e1da47f1b4f2f55",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b7ad417b24957447",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = msg.payload;\nlet params = [];\npayload.data.forEach(x => {\n    if (x.vin && x.positionDateTime) {\n        let time = new Date(x.positionDateTime).getTime();\n        let status = -1;\n        if(x.vehicleStatus === 'OFF') status = 0;\n        else if(x.vehicleStatus === 'MOVING') status = 1;\n        else if(x.vehicleStatus === 'IDLE') status = 2;\n\n        params.push([`${x.vin}:vehicleStatus`, time, status,\n            \"DUPLICATE_POLICY\", \"LAST\", \"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:altitude`, time, (x.altitude) ? x.altitude : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:odometer`, time, (x.odometer) ? x.odometer : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:engineHours`, time, (x.engineHours) ? x.engineHours : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:latitude`, time, (x.latitude) ? x.latitude : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:longitude`, time, (x.longitude) ? x.longitude : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:heading`, time, (x.heading) ? x.heading : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n        params.push([`${x.vin}:speed`, time, (x.speed) ? x.speed : 0,\n            \"DUPLICATE_POLICY\", \"LAST\",\"LABELS\", \"vin\", x.vin]);\n    }\n});\nmsg.payload = params;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 240,
        "wires": [
            [
                "a5dbf084af25a58b"
            ]
        ]
    },
    {
        "id": "f3462a98979cea3f",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 100,
        "wires": [
            [
                "e1509d66ddce4f68"
            ]
        ]
    },
    {
        "id": "b4f97edae7789e18",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Insert query ",
        "func": "let payload = msg.payload;\nmsg.data = payload;\nlet query = `INSERT INTO smart.hino_vehicle_position \n        (vin, vehicleStatus, odometer, engineHours, longitude, heading, speed, \n        positionDateTime, createdDateTime, latitude, altitude) VALUES`;\nlet params = [];\npayload.data.forEach(x => {\n    let datePosition = (x.positionDateTime) ? `STR_TO_DATE('${x.positionDateTime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let dateCreated = (x.createdDateTime) ? `STR_TO_DATE('${x.createdDateTime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let item = `('${x.vin}', '${x.vehicleStatus}', ${x.odometer}, ${x.engineHours}, ${x.longitude}, \n                ${x.heading}, ${x.speed}, ${datePosition}, ${dateCreated}, ${x.latitude}, \n                ${x.altitude})`;\n    params.push(item.replace(/\\n/gm, \" \"));\n});\nquery = query.replace(/\\n/gm, \" \");\nquery = query + ' ' + params.join(', ');\nmsg.params = params;\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "2e42cb81b2dd6771"
            ]
        ]
    },
    {
        "id": "2e42cb81b2dd6771",
        "type": "mysql2",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 680,
        "y": 180,
        "wires": [
            [
                "b54662cce8df2b14"
            ]
        ]
    },
    {
        "id": "9be52a1337887cb9",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 */1 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 420,
        "wires": [
            [
                "58d1c513d8d29371"
            ]
        ]
    },
    {
        "id": "b9dacb1caeda7b7a",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "58d1c513d8d29371"
            ]
        ]
    },
    {
        "id": "58d1c513d8d29371",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 30",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "a3cf852138203866"
            ]
        ]
    },
    {
        "id": "a3cf852138203866",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehicles",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/vehicles?size=2000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "7e902022fa305aeb"
            ]
        ]
    },
    {
        "id": "ece565574deb460b",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 460,
        "wires": []
    },
    {
        "id": "7e902022fa305aeb",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 420,
        "wires": [
            [
                "6d20e612113dd4ac"
            ]
        ]
    },
    {
        "id": "6d20e612113dd4ac",
        "type": "switch",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 460,
        "wires": [
            [
                "2d1679d174ec0ca8"
            ],
            [
                "4dfc392dbc71f985"
            ]
        ]
    },
    {
        "id": "4dfc392dbc71f985",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 31",
        "func": "msg.payload = JSON.parse(msg.payload);\ndelete msg.headers;\ndelete msg.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "ece565574deb460b"
            ]
        ]
    },
    {
        "id": "2d1679d174ec0ca8",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Insert query ",
        "func": "let payload = msg.payload;\nmsg.data = payload;\nlet query = `INSERT INTO smart.hino_vehicles (vin, plate, name, imei, brand, type, model) VALUES`;\nlet params = [];\npayload.data.forEach(x => {\n    let item = `('${x.vin}', '${x.plate}', '${x.name}', '${x.imei}', '${x.brand}', \n                '${x.type}', '${x.model}')`;\n    params.push(item.replace(/\\n/gm, \" \"));\n});\nquery = query.replace(/\\n/gm, \" \");\nquery = query + ' ' + params.join(', ');\nmsg.params = params;\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 420,
        "wires": [
            [
                "4d4789372c0b02b2"
            ]
        ]
    },
    {
        "id": "4d4789372c0b02b2",
        "type": "mysql2",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 820,
        "y": 460,
        "wires": [
            [
                "ece565574deb460b"
            ]
        ]
    },
    {
        "id": "d65341bcc093ea69",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 660,
        "wires": [
            [
                "b580bd52b036db83",
                "aac3c124176255ee"
            ]
        ]
    },
    {
        "id": "e4aef73602e177eb",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehiclepositions",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/v2/vehiclepositions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "d65341bcc093ea69"
            ]
        ]
    },
    {
        "id": "f40a283f15f93708",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 34",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            [
                "e4aef73602e177eb"
            ]
        ]
    },
    {
        "id": "11ceb0b05dae2fd5",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 700,
        "wires": []
    },
    {
        "id": "88d5df66e6e4b4ba",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "f40a283f15f93708"
            ]
        ]
    },
    {
        "id": "85fc722ab15c6ffb",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 580,
        "wires": [
            [
                "f40a283f15f93708"
            ]
        ]
    },
    {
        "id": "8cc3e34655ae207a",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 */1 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 840,
        "wires": [
            [
                "25d3f50aa7177ee7"
            ]
        ]
    },
    {
        "id": "394702c5ec3d9881",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "25d3f50aa7177ee7"
            ]
        ]
    },
    {
        "id": "25d3f50aa7177ee7",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 36",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "168fbfa298ff7f6c"
            ]
        ]
    },
    {
        "id": "168fbfa298ff7f6c",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehicles",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/vehicles?size=2000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 390,
        "y": 880,
        "wires": [
            [
                "5e9ec7f910fd338c"
            ]
        ]
    },
    {
        "id": "5e9ec7f910fd338c",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 880,
        "wires": []
    },
    {
        "id": "b580bd52b036db83",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Insert query ",
        "func": "let payload = msg.payload;\nmsg.data = payload;\nlet query = `INSERT INTO smart.hino_vehicle_position_v2 \n        (vin, vehicleStatus, odometer, engineHours, longitude, heading, speed, \n        positionDateTime, createdDateTime, latitude, altitude, provinceName) VALUES`;\nlet params = [];\npayload.data.forEach(x => {\n    let datePosition = (x.positiondatetime) ? `STR_TO_DATE('${x.positiondatetime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let dateCreated = (x.createddatetime) ? `STR_TO_DATE('${x.createddatetime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    // let printedTimezone = (x.printed_timezone) ? `STR_TO_DATE('${x.printed_timezone}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let item = `('${x.vin}', '${x.vehiclestatus}', ${x.odometer}, ${x.enginehours}, ${x.longitude}, \n                ${x.heading}, ${x.speed}, ${datePosition}, ${dateCreated}, ${x.latitude}, \n                ${x.altitude}, ${x.province_name})`;\n    params.push(item.replace(/\\n/gm, \" \"));\n});\nquery = query.replace(/\\n/gm, \" \");\nquery = query + ' ' + params.join(', ');\nmsg.params = params;\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 660,
        "wires": [
            [
                "3fb94211bde8c0ca"
            ]
        ]
    },
    {
        "id": "3fb94211bde8c0ca",
        "type": "mysql2",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 660,
        "y": 700,
        "wires": [
            [
                "11ceb0b05dae2fd5"
            ]
        ]
    },
    {
        "id": "aac3c124176255ee",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "7df67e16ee1f868d",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 100,
        "y": 1180,
        "wires": [
            [
                "8471d71e824cd51b"
            ]
        ]
    },
    {
        "id": "8471d71e824cd51b",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 12",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "68d5324960f4893b"
            ]
        ]
    },
    {
        "id": "99b0b0182e94d605",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1220,
        "wires": [
            [
                "8471d71e824cd51b"
            ]
        ]
    },
    {
        "id": "68d5324960f4893b",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehiclepositions",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/v2/vehiclepositions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 390,
        "y": 1220,
        "wires": [
            [
                "68101d728a76f12b",
                "d41771f06b4f53fa"
            ]
        ]
    },
    {
        "id": "68101d728a76f12b",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1260,
        "wires": [
            [
                "6aab8f9fe8bd0489"
            ]
        ]
    },
    {
        "id": "d41771f06b4f53fa",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 35",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1220,
        "wires": [
            [
                "f9064871c3add02a"
            ]
        ]
    },
    {
        "id": "6aab8f9fe8bd0489",
        "type": "switch",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "b54c8ac8c00636a9"
            ],
            [
                "854476030843689b"
            ]
        ]
    },
    {
        "id": "f9064871c3add02a",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b54c8ac8c00636a9",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Insert query ",
        "func": "let payload = msg.payload;\nmsg.data = payload;\nlet query = `INSERT INTO hino_vehicle_position_v2 \n        (vin, vehicleStatus, odometer, engineHours, longitude, heading, speed, \n        positionDateTime, createdDateTime, latitude, altitude, \n        provinceName, printedTimezone) VALUES`;\nlet params = [];\npayload.data.forEach(x => {\n    let datePosition = (x.positiondatetime) ? (x.positiondatetime.length > 20) ? `STR_TO_DATE('${x.positiondatetime}','%Y-%m-%dT%H:%i:%s.%fZ')` : `STR_TO_DATE('${x.positiondatetime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let dateCreated = (x.createddatetime) ? (x.createddatetime.length > 20) ? `STR_TO_DATE('${x.createddatetime}','%Y-%m-%dT%H:%i:%s.%fZ')` : `STR_TO_DATE('${x.createddatetime}','%Y-%m-%dT%H:%i:%sZ')` : null;\n    let item = `('${x.vin}', '${x.vehiclestatus}', ${x.odometer}, ${x.enginehours}, ${x.longitude}, \n                ${x.heading}, ${x.speed}, ${datePosition}, ${dateCreated}, ${x.latitude}, \n                ${x.altitude}, '${x.province_name}', '${x.printed_timezone}')`;\n    params.push(item.replace(/\\n/gm, \" \"));\n});\nquery = query.replace(/\\n/gm, \" \");\nquery = query + ' ' + params.join(', ');\nmsg.params = params;\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "32619f4581ca5ae1",
                "a785787b96ee9281"
            ]
        ]
    },
    {
        "id": "854476030843689b",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 23",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "26f860712696e846"
            ]
        ]
    },
    {
        "id": "32619f4581ca5ae1",
        "type": "mysql",
        "z": "2e56a74c132aeaaf",
        "mydb": "7f9d98d6c341571a",
        "name": "",
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "26f860712696e846"
            ]
        ]
    },
    {
        "id": "a785787b96ee9281",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1260,
        "wires": []
    },
    {
        "id": "26f860712696e846",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1300,
        "wires": []
    },
    {
        "id": "130b5f18fe7c41f9",
        "type": "cronplus",
        "z": "2e56a74c132aeaaf",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 */1 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 100,
        "y": 1420,
        "wires": [
            [
                "a670b10d53b6a43f"
            ]
        ]
    },
    {
        "id": "a670b10d53b6a43f",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 30",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1420,
        "wires": [
            [
                "ef8e679dd29ba5f6"
            ]
        ]
    },
    {
        "id": "2cbe1a5b08b9c560",
        "type": "inject",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1460,
        "wires": [
            [
                "a670b10d53b6a43f"
            ]
        ]
    },
    {
        "id": "ef8e679dd29ba5f6",
        "type": "http request",
        "z": "2e56a74c132aeaaf",
        "name": "Hino get vehicles",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/vehicles?size=2000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 370,
        "y": 1460,
        "wires": [
            [
                "5c813b8d8a980d09"
            ]
        ]
    },
    {
        "id": "5c813b8d8a980d09",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "6ba58952f6accbd1"
            ]
        ]
    },
    {
        "id": "6ba58952f6accbd1",
        "type": "switch",
        "z": "2e56a74c132aeaaf",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1460,
        "wires": [
            [
                "68a0e21a444d8160"
            ],
            [
                "4c7032d4eecc23ac"
            ]
        ]
    },
    {
        "id": "68a0e21a444d8160",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "Insert query ",
        "func": "let payload = msg.payload;\nmsg.data = payload;\nlet query = `INSERT INTO hino_vehicles (vin, plate, name, imei, brand, type, model) VALUES`;\nlet params = [];\npayload.data.forEach(x => {\n    let item = `('${x.vin}', '${x.plate}', '${x.name}', '${x.imei}', '${x.brand}', \n                '${x.type}', '${x.model}')`;\n    params.push(item.replace(/\\n/gm, \" \"));\n});\nquery = query.replace(/\\n/gm, \" \");\nquery = query + ' ' + params.join(', ');\nmsg.params = params;\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1420,
        "wires": [
            [
                "5e74ab6b5fb4e035"
            ]
        ]
    },
    {
        "id": "4c7032d4eecc23ac",
        "type": "function",
        "z": "2e56a74c132aeaaf",
        "name": "function 31",
        "func": "msg.payload = JSON.parse(msg.payload);\ndelete msg.headers;\ndelete msg.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1520,
        "wires": [
            [
                "94a32993b261e8ab"
            ]
        ]
    },
    {
        "id": "5e74ab6b5fb4e035",
        "type": "mysql",
        "z": "2e56a74c132aeaaf",
        "mydb": "7f9d98d6c341571a",
        "name": "",
        "x": 840,
        "y": 1460,
        "wires": [
            [
                "94a32993b261e8ab"
            ]
        ]
    },
    {
        "id": "94a32993b261e8ab",
        "type": "debug",
        "z": "2e56a74c132aeaaf",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ac083b48bc2518ab",
        "type": "http in",
        "z": "06108b8ace191ff7",
        "name": "",
        "url": "/admin/scope/by-code/:code",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "5ae79c73a59c90db"
            ]
        ]
    },
    {
        "id": "5ae79c73a59c90db",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "prepare",
        "func": "msg.payload = {\n    key: msg.req.params.code\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "80ca9a9ddc05d78f"
            ]
        ]
    },
    {
        "id": "80ca9a9ddc05d78f",
        "type": "cloudantplus in",
        "z": "06108b8ace191ff7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "type",
        "index": "by-code",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "edf16ce67482975a"
            ]
        ]
    },
    {
        "id": "edf16ce67482975a",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "prepare payload",
        "func": "let rs = [];\nif(msg.payload.length > 0){\n    rs = msg.payload[0];\n    msg.payload = rs;\n    msg.statusCode = 200;\n}else{\n    msg.statusCode = 400;\n    msg.payload = 'document not found'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "08f0af4b7f580661"
            ]
        ]
    },
    {
        "id": "08f0af4b7f580661",
        "type": "http response",
        "z": "06108b8ace191ff7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "50e3512e4f3d0e48",
        "type": "http in",
        "z": "06108b8ace191ff7",
        "name": "",
        "url": "/admin/scope",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "6fec0a691f75b8a4"
            ]
        ]
    },
    {
        "id": "eaa075dc2ad56acd",
        "type": "http in",
        "z": "06108b8ace191ff7",
        "name": "",
        "url": "/admin/scope",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "af89cef923076c0a"
            ]
        ]
    },
    {
        "id": "e70a801c6515e91f",
        "type": "http response",
        "z": "06108b8ace191ff7",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "906188adbf6aa812",
        "type": "cloudantplus in",
        "z": "06108b8ace191ff7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_id_",
        "design": "type",
        "index": "by-type-topic-code",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "b7ec432a2b3fbbbf"
            ]
        ]
    },
    {
        "id": "af89cef923076c0a",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "_id, _rev",
        "func": "delete msg.payload._rev;\nlet { _id, ...rest } = msg.payload;\nmsg.ori = rest;\nmsg.payload = _id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "906188adbf6aa812"
            ]
        ]
    },
    {
        "id": "7bcfd8915b8b20c5",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "prepare doc",
        "func": "let {_id, _rev} = msg.payload;\nmsg.payload = {\n    _id,\n    _rev,\n    ...msg.ori\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 540,
        "wires": [
            [
                "7a2c326736bab4c6"
            ]
        ]
    },
    {
        "id": "7a2c326736bab4c6",
        "type": "cloudantplus out",
        "z": "06108b8ace191ff7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "payonly": true,
        "operation": "insert",
        "x": 720,
        "y": 580,
        "wires": [
            [
                "e70a801c6515e91f",
                "af413a65eab3f555"
            ]
        ]
    },
    {
        "id": "b7ec432a2b3fbbbf",
        "type": "switch",
        "z": "06108b8ace191ff7",
        "name": "payload not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "7bcfd8915b8b20c5"
            ],
            [
                "0ed15aab45c260b6"
            ]
        ]
    },
    {
        "id": "0ed15aab45c260b6",
        "type": "http response",
        "z": "06108b8ace191ff7",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 720,
        "y": 640,
        "wires": []
    },
    {
        "id": "997a37d4af85b3b4",
        "type": "redis-command",
        "z": "06108b8ace191ff7",
        "server": "0fb96b870afb5c15",
        "command": "DEL",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1080,
        "y": 620,
        "wires": [
            [
                "8dca4cfcfd2d7c3e"
            ]
        ]
    },
    {
        "id": "8dca4cfcfd2d7c3e",
        "type": "debug",
        "z": "06108b8ace191ff7",
        "name": "debug 27",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 620,
        "wires": []
    },
    {
        "id": "af413a65eab3f555",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "function 28",
        "func": "msg.topic = `scope:${msg.ori.code}`;\nmsg.payload = null;\ndelete msg.ori;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "997a37d4af85b3b4"
            ]
        ]
    },
    {
        "id": "6fec0a691f75b8a4",
        "type": "function",
        "z": "06108b8ace191ff7",
        "name": "check payload",
        "func": "msg.isValid = false;\nlet {\n    topic,\n    code,\n    applicationCode,\n    hierarchyCode,\n    data\n} = msg.payload;\n\nif(\n    topic && code && applicationCode && hierarchyCode\n    && data && Array.isArray(data)\n){\n    msg.isValid = true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "225f9c8309144e87"
            ]
        ]
    },
    {
        "id": "225f9c8309144e87",
        "type": "switch",
        "z": "06108b8ace191ff7",
        "name": "isValid",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "30d8cd201e982b78"
            ],
            [
                "63d7de0a1d2cb9d2"
            ]
        ]
    },
    {
        "id": "63d7de0a1d2cb9d2",
        "type": "http response",
        "z": "06108b8ace191ff7",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 720,
        "y": 400,
        "wires": []
    },
    {
        "id": "30d8cd201e982b78",
        "type": "http response",
        "z": "06108b8ace191ff7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 340,
        "wires": []
    },
    {
        "id": "f69613269c94bb04",
        "type": "http in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "url": "/api/select-options/apps",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "781abb6c1cb25494"
            ]
        ]
    },
    {
        "id": "772f28707b2b1925",
        "type": "cloudantplus in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-configs",
        "service": "_ext_",
        "search": "_id_",
        "design": "",
        "index": "",
        "x": 580,
        "y": 100,
        "wires": [
            [
                "a5fb91c789d992ab"
            ]
        ]
    },
    {
        "id": "781abb6c1cb25494",
        "type": "change",
        "z": "20bd6215ce29ada7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "smart-apps",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 60,
        "wires": [
            [
                "772f28707b2b1925"
            ]
        ]
    },
    {
        "id": "a5fb91c789d992ab",
        "type": "function",
        "z": "20bd6215ce29ada7",
        "name": "return",
        "func": "if (msg.payload && msg.payload.data && Array.isArray(msg.payload.data)) {\n    msg.payload = msg.payload.data.map(x => {\n        return{\n            label: x.label,\n            value: x.code\n        }\n    });\n    msg.responseCode = 200;\n}else{\n    msg.responseCode = 400;\n    msg.payload = 'applications not found'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            [
                "b3acb1d424c3d418"
            ]
        ]
    },
    {
        "id": "b3acb1d424c3d418",
        "type": "http response",
        "z": "20bd6215ce29ada7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "493610ade07095d5",
        "type": "http in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "url": "/api/select-options/hierarchy",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "d6e7f6b18815c8bb"
            ]
        ]
    },
    {
        "id": "aba86789e538f3c5",
        "type": "cloudantplus in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "hierarchy",
        "index": "code",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "c8a20441520e9faf"
            ]
        ]
    },
    {
        "id": "d6e7f6b18815c8bb",
        "type": "change",
        "z": "20bd6215ce29ada7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "smart-apps",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "aba86789e538f3c5"
            ]
        ]
    },
    {
        "id": "c8a20441520e9faf",
        "type": "function",
        "z": "20bd6215ce29ada7",
        "name": "return",
        "func": "if (msg.payload && msg.payload && Array.isArray(msg.payload)) {\n    msg.payload = msg.payload.map(x => {\n        return{\n            label: x.key,\n            value: x.key\n        }\n    });\n    msg.responseCode = 200;\n}else{\n    msg.responseCode = 400;\n    msg.payload = 'applications not found'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "d774bd72f3c39253"
            ]
        ]
    },
    {
        "id": "d774bd72f3c39253",
        "type": "http response",
        "z": "20bd6215ce29ada7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "601d8e8a0535f47e",
        "type": "http in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "url": "/api/select-options/scope/:code",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "696263a6a8bc18c0"
            ]
        ]
    },
    {
        "id": "d2ee7c5ec305182d",
        "type": "http response",
        "z": "20bd6215ce29ada7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 460,
        "wires": []
    },
    {
        "id": "696263a6a8bc18c0",
        "type": "function",
        "z": "20bd6215ce29ada7",
        "name": "function 29",
        "func": "msg.payload = {\n    key: msg.req.params.code\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "b851ec9be5c26d6b"
            ]
        ]
    },
    {
        "id": "957ca631b5f2e10a",
        "type": "function",
        "z": "20bd6215ce29ada7",
        "name": "return",
        "func": "if (msg.payload && Array.isArray(msg.payload)) {\n    msg.responseCode = 200;\n    msg.payload = flatten(msg.payload[0]).map(x => {\n        return{\n            label: `${x.category} - ${x.id} - ${x.name}`,\n            value: x.id\n        }\n    });\n}else{\n    msg.responseCode = 400;\n    msg.payload = 'applications not found'\n}\nreturn msg;\n\nfunction flatten(arr, level = 0, filter = {}, parentId = null) {\n    const filterKeys = Object.keys(filter);\n    return arr.reduce((acc, { id, children, ...rest }) => {\n        const flattenedChildren = children ? flatten(children, level + 1, filter, id) : [];\n        const flattenedObject = { ...rest, id, level, parentId };\n        if (filterKeys.every(key => flattenedObject[key] === filter[key])) {\n            return [...acc, flattenedObject, ...flattenedChildren];\n        }\n        return acc.concat(flattenedChildren);\n    }, []);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "d2ee7c5ec305182d"
            ]
        ]
    },
    {
        "id": "b851ec9be5c26d6b",
        "type": "cloudantplus in",
        "z": "20bd6215ce29ada7",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "hierarchy",
        "index": "code-data",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "957ca631b5f2e10a"
            ]
        ]
    },
    {
        "id": "211ec60f96eb81f7",
        "type": "http in",
        "z": "4a4022757bfcb244",
        "name": "",
        "url": "/api/sawber/estimation",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "c9431e4eae8c989c"
            ]
        ]
    },
    {
        "id": "c9431e4eae8c989c",
        "type": "cloudantplus out",
        "z": "4a4022757bfcb244",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-transactions",
        "service": "_ext_",
        "payonly": true,
        "operation": "insert",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "9ea3dccdb9e8c393"
            ]
        ]
    },
    {
        "id": "9ea3dccdb9e8c393",
        "type": "http response",
        "z": "4a4022757bfcb244",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 140,
        "wires": []
    },
    {
        "id": "e119b7488b5337a0",
        "type": "http in",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "url": "/ddp-receiver",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "db53ac288143d6d1",
                "d8de64f63cb949c1"
            ]
        ]
    },
    {
        "id": "db53ac288143d6d1",
        "type": "debug",
        "z": "522bd2fdb3945ed1",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 40,
        "wires": []
    },
    {
        "id": "cbd8e03460019ecd",
        "type": "http response",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "d8de64f63cb949c1",
        "type": "function",
        "z": "522bd2fdb3945ed1",
        "name": "function 37",
        "func": "msg.payload = \"ddp data received\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "cbd8e03460019ecd"
            ]
        ]
    },
    {
        "id": "b904771d917ffb93",
        "type": "cronplus",
        "z": "522bd2fdb3945ed1",
        "d": true,
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */1 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 280,
        "wires": [
            [
                "7b87edb20a5df6d5",
                "136f16525d8f27f2"
            ]
        ]
    },
    {
        "id": "7b87edb20a5df6d5",
        "type": "http request",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apigateway.ktbfuso.id/ddpservice/device/viewrealtime?chassis_number=MHMFN62GPNK000965",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "8511ac6941148b62"
            ]
        ]
    },
    {
        "id": "136f16525d8f27f2",
        "type": "http request",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://apigateway.ktbfuso.id/ddpservice/device/viewrealtime?chassis_number=MHMFN62GPNK000834",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "8511ac6941148b62"
            ]
        ]
    },
    {
        "id": "5b1229989398ca35",
        "type": "inject",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "7b87edb20a5df6d5",
                "136f16525d8f27f2"
            ]
        ]
    },
    {
        "id": "8511ac6941148b62",
        "type": "switch",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 320,
        "wires": [
            [
                "c813f5e88d533cf6"
            ],
            [
                "c3ff63c244fc26f7"
            ]
        ]
    },
    {
        "id": "c813f5e88d533cf6",
        "type": "function",
        "z": "522bd2fdb3945ed1",
        "name": "function 39",
        "func": "let payload = JSON.parse(msg.payload);\nlet rs = payload.result;\nlet query = \n`INSERT INTO smart.ktb_vehicles_positions \n    (ChassisNumber, Vehiclename, Time, Sat, Speed, Alt, Heading, Ignition, \n    Lat, Lon, Mileage, Location)\nVALUES \n    ('${rs.ChassisNumber}', '${rs.Vehiclename}', '${rs.Time}', ${rs.Sat}, ${rs.Speed}, ${rs.Alt}, \n    ${rs.Heading}, ${rs.Ignition}, ${rs.Lat}, ${rs.Lon}, ${rs.Mileage}, '${rs.Location}')`;\n\nmsg.payload = null;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 280,
        "wires": [
            [
                "d4bcf4c9b61fc814"
            ]
        ]
    },
    {
        "id": "c3ff63c244fc26f7",
        "type": "debug",
        "z": "522bd2fdb3945ed1",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "d4bcf4c9b61fc814",
        "type": "mysql2",
        "z": "522bd2fdb3945ed1",
        "name": "",
        "server": "9dc2644ec5b51cb2",
        "bind": "",
        "topic": "",
        "x": 760,
        "y": 320,
        "wires": [
            [
                "c35213511cddb829"
            ]
        ]
    },
    {
        "id": "c35213511cddb829",
        "type": "debug",
        "z": "522bd2fdb3945ed1",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 320,
        "wires": []
    },
    {
        "id": "5b97d92a9bb49e05",
        "type": "http in",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "url": "/geo",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "3cdc106f1f3ace69"
            ]
        ]
    },
    {
        "id": "3cdc106f1f3ace69",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "validate",
        "func": "msg.ori = msg.payload;\n\n/**validate */\nlet { geoType, keys, group } = msg.payload;\nlet { valid, message } = validate(geoType, keys, group);\nif (!valid) msg.payload = message;\nmsg.valid = valid;\nreturn msg;\n\nfunction validate(type, keys, group) {\n    let valid = false;\n    if(!type || !keys || keys.length == 0 || group === undefined){\n        return{\n            valid,\n            message: 'invalid parameters !'\n        }\n    }\n    if (!group) {\n        if (!Array.isArray(keys) || keys.length == 0) {\n            return {\n                valid,\n                message: 'at least provide psm on keys'\n            }\n        }\n        return {\n            valid: true\n        }\n    } else {    \n        switch (type) {\n            case 'division':\n                if (keys.length > 2) {\n                    return {\n                        valid,\n                        message: 'set psm, and estate on keys'\n                    }\n                }\n                return {\n                    valid: true\n                }\n            case 'estate':\n                if (keys.length > 1) {\n                    return {\n                        valid,\n                        message: 'set only psm on keys'\n                    }\n                }\n                return {\n                    valid: true\n                }\n            default:\n                if (keys.length == 0 || keys.length == 1) {\n                    return {\n                        valid,\n                        message: 'cannot group on psm'\n                    }\n                }\n                return {\n                    valid: true\n                }\n        }\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "851f7f85faba6429"
            ]
        ]
    },
    {
        "id": "851f7f85faba6429",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "is param valid?",
        "property": "valid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "ac196b081e86d3b1"
            ],
            [
                "3e72d505847354ab"
            ]
        ]
    },
    {
        "id": "3e72d505847354ab",
        "type": "http response",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 360,
        "y": 260,
        "wires": []
    },
    {
        "id": "882309720ac517b1",
        "type": "cloudantplus in",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-libs",
        "service": "_ext_",
        "search": "_view_",
        "design": "hierarchy",
        "index": "code",
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "8ebc0dd80839a811"
            ]
        ]
    },
    {
        "id": "3b36d33cf5bcc5e6",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "DIG01-AREA-PNMP",
        "func": "msg.payload = {\n    key: 'DIG01-AREA-PNMP'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "882309720ac517b1"
            ]
        ]
    },
    {
        "id": "1f7c6a9bef178878",
        "type": "subflow:44e549ae5408d3d3",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 150,
        "y": 1460,
        "wires": [
            [
                "b6d199accfa5150c"
            ]
        ]
    },
    {
        "id": "8ebc0dd80839a811",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare sub",
        "func": "let { group, keys } = msg.ori;\nlet [psm, estate, division] = [...keys];\nlet scope = keys[keys.length - 1];\nif (group) {\n    if (psm && !estate && !division) scope = psm;\n    else if (psm && estate && !division) scope = estate;\n    else if (psm && estate && division) scope = division;\n}\n\nmsg.sub = {\n    obj: msg.payload[0].data,\n    key: 'name',\n    val: scope\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "1f7c6a9bef178878"
            ]
        ]
    },
    {
        "id": "d49f98aeb3bb1961",
        "type": "http response",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 1580,
        "wires": []
    },
    {
        "id": "b6d199accfa5150c",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare index",
        "func": "let payload = msg.sub;\nlet { geoType, keys } = msg.ori;\n\nmsg.payload = destruction(payload, geoType, keys)\nreturn msg;\n\nfunction destruction(obj, type, keys) {\n  let [psm, estate] = [...keys];\n  let rs = [];\n  let p;\n  let e;\n  let d;\n  switch (obj.category) {\n    case 'PSM':\n      p = obj.name;\n      if (type == 'psm') {\n        rs.push({\n          psm: p\n        })\n      } else {\n        obj.children.forEach(estate => {\n          e = estate.name;\n          if (type == 'estate') {\n            rs.push({\n              psm: p,\n              estate: e\n            })\n          } else {\n            estate.children.forEach(division => {\n              d = division.name;\n              if (type == 'division' || type == 'block' || type == 'road') {\n                rs.push({\n                  psm: p,\n                  estate: e,\n                  division: d\n                })\n              }\n            })\n          }\n        });\n      }\n      break;\n    case 'ESTATE':\n      e = obj.name;\n      if (type == 'estate') {\n        rs.push({\n          psm: psm,\n          estate: e\n        })\n      } else {\n        obj.children.forEach(division => {\n          d = division.name;\n          if (type == 'division' || type == 'block' || type == 'road') {\n            rs.push({\n              psm: psm,\n              estate: e,\n              division: d\n            })\n          }\n        })\n      }\n      break;\n    case 'DIVISION':\n      rs.push({\n        psm,\n        estate,\n        division: obj.name\n      })\n      break;\n    default:\n      break;\n  }\n  return rs;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "171fa719441f4182"
            ]
        ]
    },
    {
        "id": "ac196b081e86d3b1",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "group?",
        "property": "ori.group",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 200,
        "wires": [
            [
                "075f9950ee7187eb"
            ],
            [
                "20949d4b7e7a63d6"
            ]
        ]
    },
    {
        "id": "7330dececec1df2b",
        "type": "http response",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 360,
        "wires": []
    },
    {
        "id": "171fa719441f4182",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 1540,
        "wires": [
            [
                "f22fbe4d9bdc9f47"
            ],
            []
        ]
    },
    {
        "id": "f22fbe4d9bdc9f47",
        "type": "split",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 1340,
        "wires": [
            [
                "743a28aca3ae6185"
            ]
        ]
    },
    {
        "id": "d2125b14a428552e",
        "type": "join",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 630,
        "y": 1580,
        "wires": [
            [
                "d49f98aeb3bb1961"
            ]
        ]
    },
    {
        "id": "743a28aca3ae6185",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "read payload",
        "func": "msg.index = msg.payload;\nlet { keys, group } = msg.ori;\nlet other = keys[3];\nlet { psm, estate, division } = msg.payload;\nlet { geoType } = msg.ori;\nlet topic = `geo:${geoType}:${psm}`;\nif (estate) topic = `${topic}:${estate}`;\nif (division) topic = `${topic}:${division}`;\nmsg.topic = topic;\nmsg.redisKey = topic;\nmsg.payload = null;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1380,
        "wires": [
            [
                "243a71c9d774497e"
            ]
        ]
    },
    {
        "id": "243a71c9d774497e",
        "type": "redis-command",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 420,
        "y": 1420,
        "wires": [
            [
                "82a5e12469fc2e20"
            ]
        ]
    },
    {
        "id": "82a5e12469fc2e20",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "eb4ec6664a5c6f30"
            ],
            [
                "d89e155a95e12c37"
            ]
        ]
    },
    {
        "id": "8a4f3ab7a6ee4ea1",
        "type": "subflow:d7ccf53b2b9fe097",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 680,
        "y": 1380,
        "wires": [
            [
                "f2ff1b05608d8193"
            ]
        ]
    },
    {
        "id": "eb4ec6664a5c6f30",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare sub",
        "func": "let { psm, estate, division } = msg.index;\nlet { geoType } = msg.ori;\nlet other = msg.ori.keys[3];\nmsg.sub = {\n    database: 'smart-geojson',\n    design: geoType,\n    view: 'geometry',\n    key: (other)? [psm, estate, division, other] : [psm, estate, division]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "8a4f3ab7a6ee4ea1"
            ]
        ]
    },
    {
        "id": "f2ff1b05608d8193",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 62",
        "func": "msg.payload = (msg.sub && msg.sub.rows && msg.sub.rows.length > 0) ? msg.sub.rows[0].value : {\n    ...msg.index,\n    message: 'ask PNMP'\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1420,
        "wires": [
            [
                "d2125b14a428552e",
                "0db4379f44f6c1ef"
            ]
        ]
    },
    {
        "id": "5101e0ed5f07061a",
        "type": "subflow:34c9e2e17c31980a",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1080,
        "y": 1500,
        "wires": [
            [
                "237dfcd001918a4f"
            ]
        ]
    },
    {
        "id": "43f9ef5e8d31363e",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "validate & prepare sub",
        "func": "let { geoType, keys } = msg.ori;\nlet other = keys[3];\nlet { psm, estate, division } = msg.index;\nlet sub;\nswitch (geoType) {\n    case 'psm':\n        sub = {\n            scopeType: geoType,\n            ref1: psm,\n            ref2: null,\n            ref3: null\n        }\n        break;\n    case 'estate':\n        sub = {\n            scopeType: geoType,\n            ref1: estate,\n            ref2: null,\n            ref3: null\n        }\n        break;\n    case 'division':\n        sub = {\n            scopeType: geoType,\n            ref1: estate,\n            ref2: division,\n            ref3: null\n        }\n        break;\n    case 'block':\n        sub = {\n            scopeType: geoType,\n            ref1: estate,\n            ref2: division,\n            ref3: other\n        }\n        break;\n    case 'road':\n        sub = {\n            scopeType: geoType,\n            ref1: estate,\n            ref2: division,\n            ref3: other\n        }\n        break;\n}\n\nmsg.sub = sub;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1460,
        "wires": [
            [
                "5101e0ed5f07061a"
            ]
        ]
    },
    {
        "id": "237dfcd001918a4f",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "validate",
        "func": "let valid = false;\nif (!msg.sub.error && msg.sub.length > 0) {\n    valid = true;\n} else {\n    msg.payload = {\n        message: 'pnmp error check again your parameter',\n        error: msg.sub\n    }\n}\nmsg.valid = valid;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "25fdaa4eb40a2ae4",
        "type": "redis-command",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1040,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "5fc648e4d8a06699",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare payload",
        "func": "msg.payload = [msg.redisKey, JSON.stringify(msg.payload), 'EX', Number(env.get('NODERED_TTL')) * 60];\nmsg.topic = msg.redisKey;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1380,
        "wires": [
            [
                "25fdaa4eb40a2ae4"
            ]
        ]
    },
    {
        "id": "0db4379f44f6c1ef",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "found?",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 1420,
        "wires": [
            [
                "5fc648e4d8a06699"
            ],
            [
                "43f9ef5e8d31363e"
            ]
        ]
    },
    {
        "id": "d89e155a95e12c37",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "JSON Parse",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1520,
        "wires": [
            [
                "d2125b14a428552e"
            ]
        ]
    },
    {
        "id": "075f9950ee7187eb",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "groupBy ?",
        "func": "let { geoType, keys } = msg.payload;\nlet {psm, estate, division, other} = keys;\nlet view;\nswitch(keys.length){\n    case 1: view = 'geo-by-psm';\n    break;\n    case 2: view = 'geo-by-estate';\n    break;\n    case 3: view = 'geo-by-division';\n    break;\n}\nmsg.sub = {\n    database: 'smart-geojson',\n    design: geoType,\n    view,\n    key: keys\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 140,
        "wires": [
            [
                "776ee25c650af0a3"
            ]
        ]
    },
    {
        "id": "198c980a5da7f0b5",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "update GEOJSON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "517c0e36530899f0"
            ]
        ]
    },
    {
        "id": "f483eb1bd13f2967",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get DIG01-AREA-PNMP",
        "func": "msg.sub = {\n    database: 'smart-libs',\n    design: 'hierarchy',\n    view: 'code-data',\n    key: 'DIG01-AREA-PNMP'\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "456b39ddc47c6bda"
            ]
        ]
    },
    {
        "id": "e5cac997c4579d08",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "split PSM",
        "func": "let payload = msg.sub.rows[0].value;\nlet counter = 0;\nsplit();\ndelete msg.payload;\nreturn null;\n\nfunction split() {\n    if (counter < payload.length) {\n        let data = payload[counter];\n        msg.payload = data;\n        msg.psm = data;\n        node.send({...msg});\n        counter++;\n        setTimeout(split, 20000);\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "795e928c18816c82"
            ]
        ]
    },
    {
        "id": "456b39ddc47c6bda",
        "type": "subflow:d7ccf53b2b9fe097",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 440,
        "y": 560,
        "wires": [
            [
                "e5cac997c4579d08"
            ]
        ]
    },
    {
        "id": "e38ea2e7c5ac9890",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get psm",
        "func": "let { name } = msg.payload;\nmsg.sub = {\n    scopeType: 'psm',\n    ref1: name,\n    ref2: null,\n    ref3: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 560,
        "wires": [
            [
                "14a6046b267b96d9"
            ]
        ]
    },
    {
        "id": "e014cd393d12dfc8",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "found ?",
        "property": "sub.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 640,
        "wires": [
            [
                "2d7f6435fecd86d5"
            ],
            [
                "43b7d2a37373de03"
            ]
        ]
    },
    {
        "id": "2d7f6435fecd86d5",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare doc & key psm",
        "func": "let docs = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        geoType: 'psm',\n        psm: x.properties.psm,\n        pt: x.properties.pt,\n        type: x.type,\n        properties: x.properties,\n        geometry: x.geometry\n    }\n});\nlet keys = msg.sub.data?.geojson?.features.map(x => {\n    return [\n        x.properties.psm,\n        x.properties.pt\n    ];\n});\nmsg.sub = {\n    type: 'psm',\n    keys,\n    docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "e961c76d8d1785a3"
            ]
        ]
    },
    {
        "id": "1717c12f22121ab2",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":1221,\"name\":\"LWSE\",\"category\":\"ESTATE\",\"desc\":\"Leidong West Estate\",\"children\":[{\"id\":122101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":1222,\"name\":\"LWUE\",\"category\":\"ESTATE\",\"desc\":\"Leidong West Utara Estate\",\"children\":[{\"id\":122201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":1250,\"name\":\"LWSM\",\"category\":\"MILL\",\"desc\":\"Leidong West MIll\",\"children\":[]},{\"id\":2420,\"name\":\"SMSE\",\"category\":\"ESTATE\",\"desc\":\"Sawit Mas Estate\",\"children\":[{\"id\":242001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2423,\"name\":\"SKME\",\"category\":\"ESTATE\",\"desc\":\"Sungai Kikim Estate\",\"children\":[{\"id\":242301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2424,\"name\":\"SSLE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Saling Estate\",\"children\":[{\"id\":242401,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242402,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242403,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242404,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242405,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242406,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242407,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242408,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2425,\"name\":\"SPGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Pangi Estate\",\"children\":[{\"id\":242501,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242502,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242503,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242504,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242505,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242506,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242507,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242508,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2426,\"name\":\"SMIE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Musi Estate\",\"children\":[{\"id\":242601,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242602,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242603,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242604,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242605,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242606,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242607,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242608,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2450,\"name\":\"PPNM\",\"category\":\"MILL\",\"desc\":\"Pangkalan Panji Mill\",\"children\":[]},{\"id\":2451,\"name\":\"SKMM\",\"category\":\"MILL\",\"desc\":\"Sungai Kikim Mill\",\"children\":[]},{\"id\":2520,\"name\":\"SBYE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Buaya Estate\",\"children\":[{\"id\":252001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2521,\"name\":\"SMRE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Merah Estate\",\"children\":[{\"id\":252101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2550,\"name\":\"SBYM\",\"category\":\"MILL\",\"desc\":\"Sungai Buaya Mill\",\"children\":[]},{\"id\":2551,\"name\":\"SMRM\",\"category\":\"MILL\",\"desc\":\"Sungai Merah Mill\",\"children\":[]},{\"id\":2620,\"name\":\"BINE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Intan Estate\",\"children\":[{\"id\":262001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2621,\"name\":\"BMSE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Mas Estate\",\"children\":[{\"id\":262101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2622,\"name\":\"BPRE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Perak Estate\",\"children\":[{\"id\":262201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2623,\"name\":\"BPTE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Permata Estate\",\"children\":[{\"id\":262301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2650,\"name\":\"BPRM\",\"category\":\"MILL\",\"desc\":\"Bukit Perak Mill\",\"children\":[]},{\"id\":2651,\"name\":\"BNKB\",\"category\":\"BULKING\",\"desc\":\"Bangka Bulking Station\",\"children\":[]},{\"id\":2720,\"name\":\"BSWE\",\"category\":\"ESTATE\",\"desc\":\"Bumi Sawit Estate\",\"children\":[{\"id\":272001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2722,\"name\":\"SLME\",\"category\":\"ESTATE\",\"desc\":\"Sungai Lematang Estate\",\"children\":[{\"id\":272201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2723,\"name\":\"SENE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Enim Estate\",\"children\":[{\"id\":272301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2750,\"name\":\"BSWM\",\"category\":\"MILL\",\"desc\":\"Bumi Sawit Mill\",\"children\":[]},{\"id\":2820,\"name\":\"MKNE\",\"category\":\"ESTATE\",\"desc\":\"Muara Kandis Estate\",\"children\":[{\"id\":282001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2821,\"name\":\"MTWE\",\"category\":\"ESTATE\",\"desc\":\"Muara Tawas Estate\",\"children\":[{\"id\":282101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2850,\"name\":\"MKNM\",\"category\":\"MILL\",\"desc\":\"Muara Kandis Mill\",\"children\":[]},{\"id\":2920,\"name\":\"TKME\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Kembiri Estate\",\"children\":[{\"id\":292001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2921,\"name\":\"TRSE\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Rusa Estate\",\"children\":[{\"id\":292101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2950,\"name\":\"TKMM\",\"category\":\"MILL\",\"desc\":\"Tanjung Kembiri Mill\",\"children\":[]},{\"id\":2951,\"name\":\"BLTB\",\"category\":\"BULKING\",\"desc\":\"Belitung Bulking Station\",\"children\":[]},{\"id\":6120,\"name\":\"SBGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Bungur Estate\",\"children\":[{\"id\":612001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":6121,\"name\":\"SLGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Lingsing Estate\",\"children\":[{\"id\":612101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":6220,\"name\":\"BPAE\",\"category\":\"Estate\",\"desc\":\"Bukit Permai Estate\",\"children\":[]},{\"id\":6320,\"name\":\"BLSE\",\"category\":\"Estate\",\"desc\":\"Bukit Lestari Estate\",\"children\":[]},{\"id\":6520,\"name\":\"TSWE\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Sawit Estate\",\"children\":[{\"id\":652001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]}]",
        "payloadType": "json",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "a7336695f66109a7"
            ]
        ]
    },
    {
        "id": "a7336695f66109a7",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 66",
        "func": "let payload = msg.payload;\ndelete msg.payload\nlet counter = 0;\nprocessRow();\nfunction processRow() {\n    if (counter < payload.length) {\n        let data = payload[counter];\n        node.send(data);\n        counter++;\n        setTimeout(processRow, 5000);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "4500169bee01dbf1"
            ]
        ]
    },
    {
        "id": "4500169bee01dbf1",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1120,
        "wires": []
    },
    {
        "id": "43b7d2a37373de03",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 75",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 760,
        "wires": []
    },
    {
        "id": "14a6046b267b96d9",
        "type": "subflow:188768fc5fe509fd",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 740,
        "y": 600,
        "wires": [
            [
                "e014cd393d12dfc8"
            ]
        ]
    },
    {
        "id": "e961c76d8d1785a3",
        "type": "subflow:3c790259a2397aef",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "a155ec0a0c355391"
            ]
        ]
    },
    {
        "id": "795e928c18816c82",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "e38ea2e7c5ac9890"
            ]
        ]
    },
    {
        "id": "20bea84fea9d51e6",
        "type": "subflow:188768fc5fe509fd",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1080,
        "y": 680,
        "wires": [
            [
                "f28c06a47830c563"
            ]
        ]
    },
    {
        "id": "ed1af66838f34b6c",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get estate",
        "func": "let { name } = msg.estate;\nmsg.sub = {\n    scopeType: 'estate',\n    ref1: name,\n    ref2: null,\n    ref3: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 640,
        "wires": [
            [
                "20bea84fea9d51e6"
            ]
        ]
    },
    {
        "id": "a155ec0a0c355391",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "split ESTATE",
        "func": "let estates = msg.psm.children;\nlet counter = 0;\nsplit();\ndelete msg.payload;\nreturn null;\n\nfunction split() {\n    if (counter < estates.length) {\n        let data = estates[counter];\n        msg.payload = data;\n        msg.estate = data;\n        node.send({...msg});\n        counter++;\n        setTimeout(split, 5000);\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "9daf4f25dea3a99a"
            ]
        ]
    },
    {
        "id": "9daf4f25dea3a99a",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 600,
        "wires": [
            [
                "ed1af66838f34b6c"
            ]
        ]
    },
    {
        "id": "f28c06a47830c563",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "found ?",
        "property": "sub.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1120,
        "y": 720,
        "wires": [
            [
                "49b6dd4283c849c7"
            ],
            [
                "2c122037a23b9dda"
            ]
        ]
    },
    {
        "id": "2c122037a23b9dda",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 800,
        "wires": []
    },
    {
        "id": "49b6dd4283c849c7",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare doc & key estate",
        "func": "let docs = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        geoType: 'estate',\n        psm: x.properties.psm,\n        pt: x.properties.pt,\n        estate: x.properties.estate,\n        type: x.type,\n        properties: x.properties,\n        geometry: x.geometry\n    }\n});\nlet keys = msg.sub.data?.geojson?.features.map(x => {\n    return [\n        x.properties.psm,\n        x.properties.pt,\n        x.properties.estate,\n    ];\n});\nmsg.sub = {\n    type: 'estate',\n    keys,\n    docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "d0d5b272e6ba046f"
            ]
        ]
    },
    {
        "id": "d0d5b272e6ba046f",
        "type": "subflow:3c790259a2397aef",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1390,
        "y": 640,
        "wires": [
            [
                "83d90a3bc2e23907"
            ]
        ]
    },
    {
        "id": "83d90a3bc2e23907",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get division",
        "func": "let { name } = msg.estate;\nmsg.sub = {\n    scopeType: 'division',\n    ref1: name,\n    ref2: null,\n    ref3: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 680,
        "wires": [
            [
                "6ac48da85eb49ba8"
            ]
        ]
    },
    {
        "id": "6ac48da85eb49ba8",
        "type": "subflow:188768fc5fe509fd",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1420,
        "y": 720,
        "wires": [
            [
                "ae537177a43c1cd2"
            ]
        ]
    },
    {
        "id": "ae537177a43c1cd2",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "found ?",
        "property": "sub.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1460,
        "y": 760,
        "wires": [
            [
                "22bf37bb7ac1deef"
            ],
            [
                "fa7708891b46ba9e"
            ]
        ]
    },
    {
        "id": "fa7708891b46ba9e",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 820,
        "wires": []
    },
    {
        "id": "22bf37bb7ac1deef",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare doc & key division",
        "func": "let docs = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        geoType: 'division',\n        psm: x.properties.psm,\n        pt: x.properties.pt,\n        estate: x.properties.estate,\n        division: x.properties.divisi,\n        type: x.type,\n        properties: x.properties,\n        geometry: x.geometry\n    }\n});\nlet keys = msg.sub.data?.geojson?.features.map(x => {\n    return [\n        x.properties.psm,\n        x.properties.pt,\n        x.properties.estate,\n        x.properties.divisi,\n    ];\n});\nmsg.divisions = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        name: x.properties.divisi,\n        desc: x.properties.divisi,\n        category: 'DIVISION'\n    }\n});\nmsg.sub = {\n    type: 'division',\n    keys,\n    docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 720,
        "wires": [
            [
                "c5b50d54f6b998c5",
                "00ad3cd5ef7ac15d"
            ]
        ]
    },
    {
        "id": "c5b50d54f6b998c5",
        "type": "subflow:3c790259a2397aef",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 1730,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d4328058b56fd136",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get block",
        "func": "msg.sub = {\n    scopeType: 'block',\n    ref1: msg.estate.name,\n    ref2: msg.division.name,\n    ref3: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 760,
        "wires": [
            [
                "37b2efdec8d2dad9"
            ]
        ]
    },
    {
        "id": "37b2efdec8d2dad9",
        "type": "subflow:188768fc5fe509fd",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 2040,
        "y": 800,
        "wires": [
            [
                "0115fbb7e949b866",
                "de4799a109451ed5"
            ]
        ]
    },
    {
        "id": "0115fbb7e949b866",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "block found ?",
        "property": "sub.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2290,
        "y": 760,
        "wires": [
            [
                "5825cba23c72fcf8"
            ],
            [
                "9c2d1ed1d2b4c46a"
            ]
        ]
    },
    {
        "id": "de4799a109451ed5",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "get road",
        "func": "msg.sub = {\n    scopeType: 'road',\n    ref1: msg.estate.name,\n    ref2: msg.division.name,\n    ref3: null\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 840,
        "wires": [
            [
                "33e4671cbd5da025"
            ]
        ]
    },
    {
        "id": "33e4671cbd5da025",
        "type": "subflow:188768fc5fe509fd",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 2320,
        "y": 880,
        "wires": [
            [
                "fe94eebb9a0d99b6"
            ]
        ]
    },
    {
        "id": "fe94eebb9a0d99b6",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "road found ?",
        "property": "sub.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2550,
        "y": 880,
        "wires": [
            [
                "9b0e6ae5a1565b9d"
            ],
            [
                "609e4b5617aa7e18"
            ]
        ]
    },
    {
        "id": "5825cba23c72fcf8",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare doc & key block",
        "func": "let docs = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        geoType: 'block',\n        psm: x.properties.psm,\n        pt: x.properties.pt,\n        estate: x.properties.estate,\n        division: x.properties.divisi,\n        block: x.properties.blok,\n        type: x.type,\n        properties: x.properties,\n        geometry: x.geometry\n    }\n});\nlet keys = msg.sub.data?.geojson?.features.map(x => {\n    return [\n        x.properties.psm,\n        x.properties.pt,\n        x.properties.estate,\n        x.properties.divisi,\n        x.properties.blok\n    ];\n});\nmsg.sub = {\n    type: 'block',\n    keys,\n    docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 700,
        "wires": [
            [
                "59597b8cc3477726"
            ]
        ]
    },
    {
        "id": "59597b8cc3477726",
        "type": "subflow:3c790259a2397aef",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 2570,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "9b0e6ae5a1565b9d",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "prepare doc & key road",
        "func": "let docs = msg.sub.data?.geojson?.features.map(x => {\n    return {\n        geoType: 'road',\n        psm: x.properties.psm,\n        pt: x.properties.pt,\n        estate: x.properties.estate_code,\n        division: x.properties.divisi,\n        road: x.properties.id_jalan,\n        roadType: x.properties.kls_jalan,\n        type: x.type,\n        properties: x.properties,\n        geometry: x.geometry\n    }\n});\nlet keys = msg.sub.data?.geojson?.features.map(x => {\n    return [\n        x.properties.psm,\n        x.properties.pt,\n        x.properties.estate_code,\n        x.properties.divisi,\n        x.properties.id_jalan\n    ];\n});\nmsg.sub = {\n    type: 'road',\n    keys,\n    docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 840,
        "wires": [
            [
                "b1f58278efca7e59"
            ]
        ]
    },
    {
        "id": "b1f58278efca7e59",
        "type": "subflow:3c790259a2397aef",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 2810,
        "y": 880,
        "wires": [
            [
                "1333e1900f9a4119"
            ]
        ]
    },
    {
        "id": "9c2d1ed1d2b4c46a",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 800,
        "wires": []
    },
    {
        "id": "609e4b5617aa7e18",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2740,
        "y": 940,
        "wires": []
    },
    {
        "id": "8d62a0cec06e1022",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":1221,\"name\":\"LWSE\",\"category\":\"ESTATE\",\"desc\":\"Leidong West Estate\",\"children\":[{\"id\":122101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":1222,\"name\":\"LWUE\",\"category\":\"ESTATE\",\"desc\":\"Leidong West Utara Estate\",\"children\":[{\"id\":122201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":122208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":1250,\"name\":\"LWSM\",\"category\":\"MILL\",\"desc\":\"Leidong West MIll\",\"children\":[]},{\"id\":2420,\"name\":\"SMSE\",\"category\":\"ESTATE\",\"desc\":\"Sawit Mas Estate\",\"children\":[{\"id\":242001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2423,\"name\":\"SKME\",\"category\":\"ESTATE\",\"desc\":\"Sungai Kikim Estate\",\"children\":[{\"id\":242301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2424,\"name\":\"SSLE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Saling Estate\",\"children\":[{\"id\":242401,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242402,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242403,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242404,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242405,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242406,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242407,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242408,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2425,\"name\":\"SPGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Pangi Estate\",\"children\":[{\"id\":242501,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242502,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242503,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242504,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242505,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242506,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242507,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242508,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2426,\"name\":\"SMIE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Musi Estate\",\"children\":[{\"id\":242601,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242602,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242603,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242604,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242605,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242606,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242607,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":242608,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2450,\"name\":\"PPNM\",\"category\":\"MILL\",\"desc\":\"Pangkalan Panji Mill\",\"children\":[]},{\"id\":2451,\"name\":\"SKMM\",\"category\":\"MILL\",\"desc\":\"Sungai Kikim Mill\",\"children\":[]},{\"id\":2520,\"name\":\"SBYE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Buaya Estate\",\"children\":[{\"id\":252001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2521,\"name\":\"SMRE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Merah Estate\",\"children\":[{\"id\":252101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":252108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2550,\"name\":\"SBYM\",\"category\":\"MILL\",\"desc\":\"Sungai Buaya Mill\",\"children\":[]},{\"id\":2551,\"name\":\"SMRM\",\"category\":\"MILL\",\"desc\":\"Sungai Merah Mill\",\"children\":[]},{\"id\":2620,\"name\":\"BINE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Intan Estate\",\"children\":[{\"id\":262001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2621,\"name\":\"BMSE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Mas Estate\",\"children\":[{\"id\":262101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2622,\"name\":\"BPRE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Perak Estate\",\"children\":[{\"id\":262201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2623,\"name\":\"BPTE\",\"category\":\"ESTATE\",\"desc\":\"Bukit Permata Estate\",\"children\":[{\"id\":262301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":262308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2650,\"name\":\"BPRM\",\"category\":\"MILL\",\"desc\":\"Bukit Perak Mill\",\"children\":[]},{\"id\":2651,\"name\":\"BNKB\",\"category\":\"BULKING\",\"desc\":\"Bangka Bulking Station\",\"children\":[]},{\"id\":2720,\"name\":\"BSWE\",\"category\":\"ESTATE\",\"desc\":\"Bumi Sawit Estate\",\"children\":[{\"id\":272001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2722,\"name\":\"SLME\",\"category\":\"ESTATE\",\"desc\":\"Sungai Lematang Estate\",\"children\":[{\"id\":272201,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272202,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272203,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272204,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272205,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272206,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272207,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272208,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2723,\"name\":\"SENE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Enim Estate\",\"children\":[{\"id\":272301,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272302,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272303,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272304,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272305,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272306,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272307,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":272308,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2750,\"name\":\"BSWM\",\"category\":\"MILL\",\"desc\":\"Bumi Sawit Mill\",\"children\":[]},{\"id\":2820,\"name\":\"MKNE\",\"category\":\"ESTATE\",\"desc\":\"Muara Kandis Estate\",\"children\":[{\"id\":282001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2821,\"name\":\"MTWE\",\"category\":\"ESTATE\",\"desc\":\"Muara Tawas Estate\",\"children\":[{\"id\":282101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":282108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2850,\"name\":\"MKNM\",\"category\":\"MILL\",\"desc\":\"Muara Kandis Mill\",\"children\":[]},{\"id\":2920,\"name\":\"TKME\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Kembiri Estate\",\"children\":[{\"id\":292001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2921,\"name\":\"TRSE\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Rusa Estate\",\"children\":[{\"id\":292101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":292108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":2950,\"name\":\"TKMM\",\"category\":\"MILL\",\"desc\":\"Tanjung Kembiri Mill\",\"children\":[]},{\"id\":2951,\"name\":\"BLTB\",\"category\":\"BULKING\",\"desc\":\"Belitung Bulking Station\",\"children\":[]},{\"id\":6120,\"name\":\"SBGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Bungur Estate\",\"children\":[{\"id\":612001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":6121,\"name\":\"SLGE\",\"category\":\"ESTATE\",\"desc\":\"Sungai Lingsing Estate\",\"children\":[{\"id\":612101,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612102,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612103,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612104,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612105,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612106,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612107,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":612108,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]},{\"id\":6220,\"name\":\"BPAE\",\"category\":\"Estate\",\"desc\":\"Bukit Permai Estate\",\"children\":[]},{\"id\":6320,\"name\":\"BLSE\",\"category\":\"Estate\",\"desc\":\"Bukit Lestari Estate\",\"children\":[]},{\"id\":6520,\"name\":\"TSWE\",\"category\":\"ESTATE\",\"desc\":\"Tanjung Sawit Estate\",\"children\":[{\"id\":652001,\"name\":\"DIVISI 1\",\"desc\":\"DIVISI 1\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652002,\"name\":\"DIVISI 2\",\"desc\":\"DIVISI 2\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652003,\"name\":\"DIVISI 3\",\"desc\":\"DIVISI 3\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652004,\"name\":\"DIVISI 4\",\"desc\":\"DIVISI 4\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652005,\"name\":\"DIVISI 5\",\"desc\":\"DIVISI 5\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652006,\"name\":\"DIVISI 6\",\"desc\":\"DIVISI 6\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652007,\"name\":\"DIVISI 7\",\"desc\":\"DIVISI 7\",\"category\":\"DIVISION\",\"children\":[]},{\"id\":652008,\"name\":\"DIVISI 8\",\"desc\":\"DIVISI 8\",\"category\":\"DIVISION\",\"children\":[]}]}]",
        "payloadType": "json",
        "x": 110,
        "y": 1160,
        "wires": [
            [
                "1c392b43757817fa"
            ]
        ]
    },
    {
        "id": "1c392b43757817fa",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 67",
        "func": "msg.payload = {\n    selector: {\n        \"geoType\": {\n            \"$eq\": \"road\"\n        }\n    },\n    limit: 100000\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1200,
        "wires": [
            [
                "0edf99770e05179c"
            ]
        ]
    },
    {
        "id": "b4f332a6cb86e3e9",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1280,
        "wires": []
    },
    {
        "id": "0edf99770e05179c",
        "type": "cloudantplus in",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "search": "_query_",
        "design": "",
        "index": "",
        "x": 340,
        "y": 1200,
        "wires": [
            [
                "118960d79920a774"
            ]
        ]
    },
    {
        "id": "118960d79920a774",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 68",
        "func": "msg.payload = {\n    docs: msg.payload.docs.map(x => {\n        return { ...x, _deleted: true }\n    })\n};\nmsg.url = `${env.get('DOCKER_COUCHDB_DOMAIN')}/smart-geojson/_bulk_docs`\nmsg.headers = {\n    \"Authorization\": \"Basic \" +\n        Buffer.from(`${env.get('DOCKER_COUCHDB_USER')}:${env.get('DOCKER_COUCHDB_PASSWORD')}`).toString(\"base64\"),\n    \"Content-Type\": \"application/json; charset=utf-8\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "1533d27f160d5de9"
            ]
        ]
    },
    {
        "id": "1533d27f160d5de9",
        "type": "http request",
        "z": "c5b9039a5fc48f97",
        "name": "bulk delete",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5930/smart-geojson/_bulk_docs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 1280,
        "wires": [
            [
                "b4f332a6cb86e3e9"
            ]
        ]
    },
    {
        "id": "1333e1900f9a4119",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 880,
        "wires": []
    },
    {
        "id": "517c0e36530899f0",
        "type": "http request",
        "z": "c5b9039a5fc48f97",
        "name": "renew pnmp token",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://digistage.sinarmas-agri.com/api-app-portal-beta/api/pnmp_token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 150,
        "y": 560,
        "wires": [
            [
                "c8c7c3c6c0def50b"
            ]
        ]
    },
    {
        "id": "c8c7c3c6c0def50b",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "f483eb1bd13f2967"
            ],
            [
                "36190989c63f3b0a"
            ]
        ]
    },
    {
        "id": "36190989c63f3b0a",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 700,
        "wires": []
    },
    {
        "id": "00ad3cd5ef7ac15d",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "divisions",
        "property": "divisions.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2000,
        "y": 640,
        "wires": [
            [
                "c0abb73411cfde78"
            ]
        ]
    },
    {
        "id": "c0abb73411cfde78",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "split DIVISION",
        "func": "let divisions = msg.divisions;\nlet counter = 0;\nsplit();\ndelete msg.payload;\nreturn null;\n\nfunction split() {\n    if (counter < divisions.length) {\n        let data = divisions[counter];\n        msg.payload = data;\n        msg.division = data;\n        node.send({...msg});\n        counter++;\n        setTimeout(split, 1000);\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 680,
        "wires": [
            [
                "4256cf3e81acc8f8"
            ]
        ]
    },
    {
        "id": "4256cf3e81acc8f8",
        "type": "switch",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1990,
        "y": 720,
        "wires": [
            [
                "d4328058b56fd136"
            ]
        ]
    },
    {
        "id": "776ee25c650af0a3",
        "type": "subflow:d7ccf53b2b9fe097",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 780,
        "y": 180,
        "wires": [
            [
                "1a29613acc7afbdd"
            ]
        ]
    },
    {
        "id": "b65dd7ab52d2acab",
        "type": "http response",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1000,
        "y": 220,
        "wires": []
    },
    {
        "id": "1a29613acc7afbdd",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 69",
        "func": "msg.payload = msg.sub.rows?.map(x => x.value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 180,
        "wires": [
            [
                "b65dd7ab52d2acab"
            ]
        ]
    },
    {
        "id": "b2eada42f9e5af3a",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 60",
        "func": "let { geoType, keys } = msg.ori;\nlet [psm, estate, division, other] = keys;\nmsg.payload = [`geo:${geoType}:${psm}${(estate) ? ':' + estate : ''}${(division) ? ':' + division : ''}${(other) ? ':' + other : ''}`];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "20949d4b7e7a63d6",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "groupBy ?",
        "func": "let { geoType, keys } = msg.payload;\nlet {psm, estate, division, other} = keys;\nmsg.sub = {\n    database: 'smart-geojson',\n    design: geoType,\n    view: 'geometry',\n    key: keys\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 280,
        "wires": [
            [
                "bce3b2f489190dd8"
            ]
        ]
    },
    {
        "id": "bce3b2f489190dd8",
        "type": "subflow:d7ccf53b2b9fe097",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "x": 780,
        "y": 320,
        "wires": [
            [
                "f180a25634704473"
            ]
        ]
    },
    {
        "id": "f180a25634704473",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 70",
        "func": "msg.payload = msg.sub.rows?.map(x => x.value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 320,
        "wires": [
            [
                "7330dececec1df2b"
            ]
        ]
    },
    {
        "id": "db136c5d713d3cd0",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1680,
        "wires": [
            [
                "5f41ce33e1d008a9"
            ]
        ]
    },
    {
        "id": "4948edd4b85e148f",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "zadd 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 1, \"{\\\"test\\\":1,\\\"hello\\\":\\\"world1\\\", \\\"hexstr\\\": \\\"000102\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 1860,
        "wires": [
            [
                "f9ccc3e1983f8ec7"
            ]
        ]
    },
    {
        "id": "89734db2e2b504d9",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2060,
        "wires": [
            [
                "ad21bea98339b79e"
            ]
        ]
    },
    {
        "id": "5f41ce33e1d008a9",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: hello world",
        "keyval": 0,
        "func": "\nreturn \"hello world\"",
        "stored": false,
        "block": false,
        "x": 500,
        "y": 1680,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "44f2c4e99a1e521d",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2000,
        "wires": []
    },
    {
        "id": "29035e2612073aa9",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: ping pong",
        "keyval": 0,
        "func": "local foo = redis.call('ping')\nreturn foo",
        "stored": false,
        "block": false,
        "x": 490,
        "y": 1740,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "b9f91d2f3fceb024",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: set",
        "keyval": "1",
        "func": "local foo = redis.call('SET', KEYS[1], cjson.encode({KEYS, ARGV}))\nreturn foo",
        "stored": false,
        "block": false,
        "x": 470,
        "y": 1800,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "cfb9a1d9d6235c96",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "set key value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"xx\", \"sss\"]",
        "payloadType": "json",
        "x": 130,
        "y": 1800,
        "wires": [
            [
                "b9f91d2f3fceb024"
            ]
        ]
    },
    {
        "id": "f9ccc3e1983f8ec7",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: zadd",
        "keyval": "1",
        "func": "local foo = redis.call('ZADD', KEYS[1], ARGV[1], ARGV[2])\nreturn foo",
        "stored": false,
        "block": false,
        "x": 480,
        "y": 1860,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "75a5d81a80da3959",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "zadd 2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 2, \"{\\\"test\\\":2,\\\"hello\\\":\\\"world2\\\", \\\"hexstr\\\": \\\"030405\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 1900,
        "wires": [
            [
                "f9ccc3e1983f8ec7"
            ]
        ]
    },
    {
        "id": "c32955b956a9c79a",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: cjson decode",
        "keyval": "1",
        "func": "local foo = cjson.decode(ARGV[2])\n\nreturn foo.test",
        "stored": false,
        "block": false,
        "x": 500,
        "y": 2000,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "84bd8bb2222e0517",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "cjson",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\",3,\"{\\\"test\\\":3,\\\"hello\\\":\\\"world3\\\", \\\"hexstr\\\": \\\"060708\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 2000,
        "wires": [
            [
                "c32955b956a9c79a"
            ]
        ]
    },
    {
        "id": "8d8b9d844348773c",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1740,
        "wires": [
            [
                "29035e2612073aa9"
            ]
        ]
    },
    {
        "id": "15959eedb0e32c26",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: substring",
        "keyval": "1",
        "func": "local foo = tonumber(string.sub(KEYS[1], -2, -1))\n\nreturn foo",
        "stored": false,
        "block": false,
        "x": 490,
        "y": 2120,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "b66f5d8e92e9fbbf",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "substring",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 3, \"{\\\"test\\\":3,\\\"hello\\\":\\\"world3\\\", \\\"hexstr\\\": \\\"060708\\\"}\"]",
        "payloadType": "json",
        "x": 120,
        "y": 2120,
        "wires": [
            [
                "15959eedb0e32c26"
            ]
        ]
    },
    {
        "id": "2a7fac1573b38b98",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "zadd 3",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 3, \"{\\\"test\\\":3,\\\"hello\\\":\\\"world3\\\", \\\"hexstr\\\": \\\"060708\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 1940,
        "wires": [
            [
                "f9ccc3e1983f8ec7"
            ]
        ]
    },
    {
        "id": "ad21bea98339b79e",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: cjson encode",
        "keyval": "0",
        "func": "local foo = {}\n\nfoo.field1 = 1\nfoo.field2 = \"hello world\"\nfoo.field3 = {}\nfoo.field3.name = \"paul\"\n\nreturn cjson.encode(foo)",
        "stored": false,
        "block": false,
        "x": 500,
        "y": 2060,
        "wires": [
            [
                "41d9477be860b123"
            ]
        ]
    },
    {
        "id": "41d9477be860b123",
        "type": "json",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 2060,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "b6378268209d3f41",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: zcount",
        "keyval": "1",
        "func": "local elementCount = redis.call('ZCOUNT', KEYS[1], \"-inf\", \"+inf\")\n\nreturn elementCount",
        "stored": false,
        "block": false,
        "x": 480,
        "y": 2180,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "1efddadd63d15077",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "zcount",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 4, \"{\\\"test\\\":4,\\\"hello\\\":\\\"world4\\\", \\\"hexstr\\\": \\\"090a0b\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 2180,
        "wires": [
            [
                "b6378268209d3f41"
            ]
        ]
    },
    {
        "id": "e49699a6dde3b6de",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: zrange",
        "keyval": "1",
        "func": "local elementCount = redis.call('ZRANGE', KEYS[1], 0, 3)\n\nreturn elementCount",
        "stored": false,
        "block": false,
        "x": 480,
        "y": 2240,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "5da7c2d8aea3b596",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "zrange",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 4, \"{\\\"test\\\":4,\\\"hello\\\":\\\"world4\\\", \\\"hexstr\\\": \\\"090a0b\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 2240,
        "wires": [
            [
                "e49699a6dde3b6de"
            ]
        ]
    },
    {
        "id": "e9aa29233106c2c8",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "concat",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"device:96a4:1a87:04\", 4, \"{\\\"test\\\":4,\\\"hello\\\":\\\"world4\\\", \\\"hexstr\\\": \\\"090a0b\\\"}\"]",
        "payloadType": "json",
        "x": 110,
        "y": 2300,
        "wires": [
            [
                "f513666fe9a2c2ca"
            ]
        ]
    },
    {
        "id": "f513666fe9a2c2ca",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "redis lua: complex",
        "keyval": "1",
        "func": "local response = \"\"\nlocal elementCount = redis.call('ZRANGE', KEYS[1], 0, 3)\n\nfor i=1,3,1\ndo\n  response = response .. cjson.decode(elementCount[i]).hexstr\nend\n\nreturn response",
        "stored": false,
        "block": false,
        "x": 490,
        "y": 2300,
        "wires": [
            [
                "44f2c4e99a1e521d"
            ]
        ]
    },
    {
        "id": "923697f71cbe64b9",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"name\":\"mnazirp\",\"age\":45}]",
        "payloadType": "json",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "6984e7c0cce94363"
            ]
        ]
    },
    {
        "id": "6984e7c0cce94363",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 73",
        "func": "let payload = [\n    { key: 'key1', value: 'value1' },\n    { key: 'key2', value: 'value2' },\n    { key: 'key3', value: 'value3' }\n];\nfor (const item of payload) {\n    // Set each key-value pair in Redis\n    node.send({\n        command: 'set',\n        payload: item.value,\n        topic: item.key,\n        ex: 3600\n    });\n}\nreturn null; // This prevents duplicate output messages\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 960,
        "wires": [
            [
                "e95947568bea11ae"
            ]
        ]
    },
    {
        "id": "e95947568bea11ae",
        "type": "redis-out",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "command": "rpush",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 480,
        "y": 960,
        "wires": []
    },
    {
        "id": "3586fca78e3e4b49",
        "type": "inject",
        "z": "c5b9039a5fc48f97",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"name\":\"mnazirp\",\"age\":45}]",
        "payloadType": "json",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "dc1d7ca18003973b"
            ]
        ]
    },
    {
        "id": "dc1d7ca18003973b",
        "type": "function",
        "z": "c5b9039a5fc48f97",
        "name": "function 71",
        "func": "msg.payload = [\n  {\n    \"type\": \"psm\",\n    \"properties\": [],\n    \"geometry\": {}\n  },\n  {\n    \"type\": \"estate\",\n    \"properties\": [],\n    \"geometry\": {}\n  },\n  {\n    \"type\": \"division\",\n    \"properties\": [],\n    \"geometry\": {}\n  }\n].map(x => {\n  return JSON.stringify(x)\n})\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 820,
        "wires": [
            [
                "75a05186293380f0"
            ]
        ]
    },
    {
        "id": "75a05186293380f0",
        "type": "redis-lua-script",
        "z": "c5b9039a5fc48f97",
        "server": "0fb96b870afb5c15",
        "name": "",
        "keyval": 0,
        "func": "local data = ARGV\n\nredis.call('SET', 'xxx', cjson.encode(data))\n",
        "stored": false,
        "block": false,
        "x": 300,
        "y": 860,
        "wires": [
            [
                "de1fa05287b24b64"
            ]
        ]
    },
    {
        "id": "de1fa05287b24b64",
        "type": "debug",
        "z": "c5b9039a5fc48f97",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 860,
        "wires": []
    },
    {
        "id": "2158300e6fc8788f",
        "type": "cronplus",
        "z": "d13820078197e616",
        "d": true,
        "name": "hino vehicle tracking",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 100,
        "wires": [
            [
                "eb64ed52ae8f1a18"
            ]
        ]
    },
    {
        "id": "eb64ed52ae8f1a18",
        "type": "function",
        "z": "d13820078197e616",
        "name": "function 52",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "51fab92465e0c058"
            ]
        ]
    },
    {
        "id": "57d69253250a4ac2",
        "type": "inject",
        "z": "d13820078197e616",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "eb64ed52ae8f1a18"
            ]
        ]
    },
    {
        "id": "51fab92465e0c058",
        "type": "http request",
        "z": "d13820078197e616",
        "name": "Hino get vehiclepositions",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/v2/vehiclepositions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "ec19fb40493e2b7c",
                "7a473e3c7d03e91f"
            ]
        ]
    },
    {
        "id": "ec19fb40493e2b7c",
        "type": "function",
        "z": "d13820078197e616",
        "name": "validation",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "b3c015605912187d"
            ]
        ]
    },
    {
        "id": "7a473e3c7d03e91f",
        "type": "function",
        "z": "d13820078197e616",
        "name": "function 53",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "ab2a2452075f8e7f"
            ]
        ]
    },
    {
        "id": "b3c015605912187d",
        "type": "switch",
        "z": "d13820078197e616",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "d291712a6ca4ce5f"
            ],
            [
                "adb5dc9421af5579"
            ]
        ]
    },
    {
        "id": "ab2a2452075f8e7f",
        "type": "debug",
        "z": "d13820078197e616",
        "name": "debug 54",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "d291712a6ca4ce5f",
        "type": "function",
        "z": "d13820078197e616",
        "name": "prepare documents",
        "func": "let docs = msg.payload.data.map(x => {\n    return {\n        szDeviceID: (x.vin) ? x.vin : null,\n        szStatus: (x.vehiclestatus) ? x.vehiclestatus : null,\n        szCondition: null,\n        iOdometer: (x.odometer) ? parseInt(x.odometer) : null,\n        iFuel: null,\n        iSpeed: (x.speed) ? parseInt(x.speed) : null,\n        decLat: (x.latitude) ? x.latitude : null,\n        decLon: (x.longitude) ? x.longitude : null,\n        iAlt: (x.altitude) ? parseInt(x.altitude) : null,\n        dtmDevice: (x.printed_timezone) ? x.printed_timezone : null, //positiondatetime ga dipake\n        dtmServer: (x.createddatetime) ? x.createddatetime : null,\n        szDescription: (x.province_name) ? x.province_name : null,\n        iCreatedBy: 'cronjob-hino',\n        dtmCreatedDate: new Date(),\n        iModifiedBy: null,\n        dtmModifiedDate: new Date()\n    }\n});\nmsg.sub = {\n    database: 'smart-tracking',\n    docs: docs\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "2d59f41d60594c41"
            ]
        ]
    },
    {
        "id": "adb5dc9421af5579",
        "type": "function",
        "z": "d13820078197e616",
        "name": "function 54",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "be6ae8e32096a82a"
            ]
        ]
    },
    {
        "id": "73b0fc70536de338",
        "type": "debug",
        "z": "d13820078197e616",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "be6ae8e32096a82a",
        "type": "debug",
        "z": "d13820078197e616",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 280,
        "wires": []
    },
    {
        "id": "9d55b689d4cd8558",
        "type": "cronplus",
        "z": "d13820078197e616",
        "d": true,
        "name": "hino vehicles",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 */1 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 110,
        "y": 380,
        "wires": [
            [
                "28dec8cb7278843d"
            ]
        ]
    },
    {
        "id": "28dec8cb7278843d",
        "type": "function",
        "z": "d13820078197e616",
        "name": "function 55",
        "func": "msg.payload = {\n    grant_type: 'client_credentials'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "e5a3172e2c504f7e"
            ]
        ]
    },
    {
        "id": "28b5063b74f6e089",
        "type": "inject",
        "z": "d13820078197e616",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "28dec8cb7278843d"
            ]
        ]
    },
    {
        "id": "e5a3172e2c504f7e",
        "type": "http request",
        "z": "d13820078197e616",
        "name": "Hino get vehicles",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api-sandbox.hino.co.id/hmsi/hmsi-std-api/vehicles?size=2000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-IBM-Client-Id",
                "valueType": "other",
                "valueValue": "6823e121-a1ec-4fff-8711-b5c18486b57b"
            },
            {
                "keyType": "other",
                "keyValue": "accept",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "8628d12fa8232121"
            ]
        ]
    },
    {
        "id": "8628d12fa8232121",
        "type": "function",
        "z": "d13820078197e616",
        "name": "Set query ",
        "func": "let payload = JSON.parse(msg.payload);\nmsg.isValid = false;\nif (payload.data) {\n    msg.isValid = true;\n    msg.payload = payload;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "f8af11ab216893d8"
            ]
        ]
    },
    {
        "id": "f8af11ab216893d8",
        "type": "switch",
        "z": "d13820078197e616",
        "name": "",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 420,
        "wires": [
            [
                "34fa04e5252242d0"
            ],
            [
                "b65f6adae59e882c"
            ]
        ]
    },
    {
        "id": "34fa04e5252242d0",
        "type": "function",
        "z": "d13820078197e616",
        "name": "prepare documents",
        "func": "let docs = msg.payload.map(x => {\n    return {\n        szDeviceID: (x.vin) ? x.vin : null,\n        iCatID: null,\n        iSourceID: (x.name) ? x.name : null,\n        szPhysicalNo1: (x.plate) ? x.plate : null,\n        szPhysicalNo2: null,\n        szPhysicalNo3: null,\n        szIMEI: (x.imei) ? x.imei : null,\n        szBrand: (x.brand) ? x.brand : null,\n        szModel: (x.model) ? x.model : null,\n        szType: (x.type) ? x.type : null,\n        szDesciption: null,\n        iCreatedBy: 'cronjob-hino',\n        dtmCreatedDate: new Date(),\n        iModifiedBy: null,\n        dtmModifiedDate: new Date()\n    }\n});\n\nmsg.sub = {\n    database: 'smart-devices',\n    docs: docs\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "df776ab7fafa518d"
            ]
        ]
    },
    {
        "id": "b65f6adae59e882c",
        "type": "function",
        "z": "d13820078197e616",
        "name": "function 56",
        "func": "msg.payload = JSON.parse(msg.payload);\ndelete msg.headers;\ndelete msg.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 460,
        "wires": [
            [
                "3614fadd0a981a76"
            ]
        ]
    },
    {
        "id": "2d59f41d60594c41",
        "type": "subflow:f0ae825b26a06b48",
        "z": "d13820078197e616",
        "name": "",
        "x": 760,
        "y": 220,
        "wires": [
            [
                "73b0fc70536de338"
            ]
        ]
    },
    {
        "id": "3614fadd0a981a76",
        "type": "debug",
        "z": "d13820078197e616",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 460,
        "wires": []
    },
    {
        "id": "df776ab7fafa518d",
        "type": "subflow:f0ae825b26a06b48",
        "z": "d13820078197e616",
        "name": "",
        "x": 840,
        "y": 420,
        "wires": [
            [
                "e9dbbf2725b384df"
            ]
        ]
    },
    {
        "id": "e9dbbf2725b384df",
        "type": "debug",
        "z": "d13820078197e616",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 420,
        "wires": []
    },
    {
        "id": "8efccc8d05b6fe56",
        "type": "inject",
        "z": "f26db8e574ea05fe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "c9c2453148bdfc12",
                "e2c99eb330145b88",
                "cf1e1a0d463bed61",
                "3b5bc8806a3d1ec4",
                "ae26d2015ff0642e",
                "dba3ad00c6cac57d",
                "4db34af319d3bcaf"
            ]
        ]
    },
    {
        "id": "c9c2453148bdfc12",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/road",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/road\",\n  \"views\": {\n    \"geometry\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.road && (!doc.block)) emit([doc.psm, doc.estate, doc.division, doc.road], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm, \\n      pt: doc.pt, \\n      estate: doc.estate, \\n      division: doc.division,\\n      road: doc.road,\\n      roadType: doc.roadType,\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-division\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.road && (!doc.block)) emit([doc.psm, doc.estate, doc.division], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm, \\n      pt: doc.pt, \\n      estate: doc.estate, \\n      division: doc.division,\\n      road: doc.road,\\n      roadType: doc.roadType,\\n    },\\n    geometry: doc.geometry\\n    \\n  });\\n}\"\n    },\n    \"geo-by-psm\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.road && (!doc.block)) emit(doc.psm, {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm, \\n      pt: doc.pt, \\n      estate: doc.estate, \\n      division: doc.division,\\n      road: doc.road,\\n      roadType: doc.roadType,\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-estate\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.road && (!doc.block)) emit([doc.psm, doc.estate], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm, \\n      pt: doc.pt, \\n      estate: doc.estate, \\n      division: doc.division,\\n      road: doc.road,\\n      roadType: doc.roadType,\\n    },\\n    geometry: doc.geometry\\n    \\n  });\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "d985ddc993b89f53",
        "type": "debug",
        "z": "f26db8e574ea05fe",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "12112cb4a3a5cf25",
        "type": "cloudantplus out",
        "z": "f26db8e574ea05fe",
        "name": "",
        "cloudant": "784d89e62dfb5070",
        "database": "smart-geojson",
        "service": "_ext_",
        "payonly": true,
        "operation": "insert",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "d985ddc993b89f53"
            ]
        ]
    },
    {
        "id": "e2c99eb330145b88",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/block",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/block\",\n  \"views\": {\n    \"geometry\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.block) emit([doc.psm, doc.estate, doc.division, doc.block], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.estate, \\n      pt: doc.estate, \\n      estate: doc.estate, \\n      division: doc.division,\\n      block: doc.block,\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-psm\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.block) emit(doc.psm, {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.estate, \\n      pt: doc.estate, \\n      estate: doc.estate, \\n      division: doc.division,\\n      block: doc.block,\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-division\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.block) emit([doc.psm, doc.estate, doc.division], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.estate, \\n      pt: doc.estate, \\n      estate: doc.estate, \\n      division: doc.division,\\n      block: doc.block,\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-estate\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.block) emit([doc.psm, doc.estate], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.estate, \\n      pt: doc.estate, \\n      estate: doc.estate, \\n      division: doc.division,\\n      block: doc.block,\\n    },\\n    geometry: doc.geometry});\\n}\"\n    },\n    \"list-by-division\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && doc.block) emit([doc.psm, doc.estate, doc.division], doc.block);\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 320,
        "y": 220,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "cf1e1a0d463bed61",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/division",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/division\",\n  \"views\": {\n    \"geometry\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && (!doc.block) && (!doc.roadID)) emit([doc.psm, doc.estate, doc.division], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt,\\n      estate: doc.estate,\\n      division: doc.division\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    },\n    \"geo-by-estate\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && (!doc.block) && (!doc.roadID)) emit([doc.psm, doc.estate], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt,\\n      estate: doc.estate,\\n      division: doc.division\\n    },\\n    geometry: doc.geometry});\\n}\"\n    },\n    \"geo-by-psm\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && (!doc.block) && (!doc.roadID)) emit(doc.psm, {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt,\\n      estate: doc.estate,\\n      division: doc.division\\n    },\\n    geometry: doc.geometry});\\n}\"\n    },\n    \"list-by-estate\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && doc.division && (!doc.block) && (!doc.roadID)) emit([doc.psm, doc.estate], doc.division);\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "3b5bc8806a3d1ec4",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/estate",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/estate\",\n  \"views\": {\n    \"geometry\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && (!doc.division) && (!doc.block)) emit([doc.psm, doc.estate], {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt,\\n      estate: doc.estate\\n    },\\n    geometry: doc.geometry});\\n}\"\n    },\n    \"geo-by-psm\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.estate && (!doc.division) && (!doc.block)) emit(doc.psm, {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt,\\n      estate: doc.estate\\n    },\\n    geometry: doc.geometry});\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "ae26d2015ff0642e",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/filter",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/filter\",\n  \"views\": {\n    \"block\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && doc.division && doc.block) emit([doc.psm, doc.pt, doc.estate, doc.division, doc.block], {_id: doc._id, _rev: doc._rev});\\n}\"\n    },\n    \"road\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.division && doc.road && (!doc.block)) emit([doc.psm, doc.pt, doc.division, doc.road], {_id: doc._id, _rev: doc._rev});\\n}\"\n    },\n    \"division\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && doc.division && (!doc.roadID) && (!doc.block)) emit([doc.psm, doc.pt, doc.estate, doc.division], {_id: doc._id, _rev: doc._rev});\\n}\"\n    },\n    \"psm\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && (!doc.estate) && (!doc.division) && (!doc.roadID) && (!doc.block)) emit([doc.psm, doc.pt], {_id: doc._id, _rev: doc._rev});\\n}\"\n    },\n    \"estate\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && (!doc.division) && (!doc.roadID) && (!doc.block)) emit([doc.psm, doc.pt, doc.estate], {_id: doc._id, _rev: doc._rev});\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 310,
        "y": 340,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "dba3ad00c6cac57d",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/psm",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/psm\",\n  \"views\": {\n    \"geometry\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && (!doc.estate) && (!doc.division) && (!doc.block)) emit(doc.psm, {\\n    type: doc.type,\\n    properties: {\\n      psm: doc.psm,\\n      pt: doc.pt\\n    },\\n    geometry: doc.geometry\\n  });\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    },
    {
        "id": "4db34af319d3bcaf",
        "type": "template",
        "z": "f26db8e574ea05fe",
        "name": "_design/reduce",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"_id\": \"_design/reduce\",\n  \"views\": {\n    \"list-division\": {\n      \"reduce\": \"function (keys, values, rereduce) {\\n  if (rereduce) {\\n    return sum(values);\\n  } else {\\n    return values.length;\\n  }\\n}\",\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && doc.division && (!doc.block) && (!doc.road)) emit([doc.estate, doc.division], 1);\\n}\"\n    },\n    \"list-psm\": {\n      \"reduce\": \"function (keys, values, rereduce) {\\n  if (rereduce) {\\n    return sum(values);\\n  } else {\\n    return values.length;\\n  }\\n}\",\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && (!doc.estate) && (!doc.division) && (!doc.block) && (!doc.road)) emit(doc.psm, 1);\\n}\"\n    },\n    \"list-estate\": {\n      \"reduce\": \"function (keys, values, rereduce) {\\n  if (rereduce) {\\n    return sum(values);\\n  } else {\\n    return values.length;\\n  }\\n}\",\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && (!doc.division) && (!doc.block) && (!doc.road)) emit([doc.psm, doc.estate], 1);\\n}\"\n    },\n    \"list-block\": {\n      \"reduce\": \"function (keys, values, rereduce) {\\n  if (rereduce) {\\n    return sum(values);\\n  } else {\\n    return values.length;\\n  }\\n}\",\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && doc.division && doc.block && (!doc.road)) emit([doc.estate, doc.division, doc.block], 1);\\n}\"\n    },\n    \"list-road\": {\n      \"map\": \"function (doc) {\\n  if(doc.psm && doc.pt && doc.estate && doc.division && (!doc.block) && doc.road) emit([doc.estate, doc.division, doc.road], 1);\\n}\",\n      \"reduce\": \"function (keys, values, rereduce) {\\n  if (rereduce) {\\n    return sum(values);\\n  } else {\\n    return values.length;\\n  }\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}",
        "output": "str",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "12112cb4a3a5cf25"
            ]
        ]
    }
]